
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003274  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a0  080033a0  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080033a0  080033a0  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033a0  080033a0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080033a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000028  080033d0  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080033d0  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ec4  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6c  00000000  00000000  00028f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002aa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002b550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fae  00000000  00000000  0002bee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7c3  00000000  00000000  00042e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082095  00000000  00000000  0004f659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d16ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a0  00000000  00000000  000d1740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08003368 	.word	0x08003368

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08003368 	.word	0x08003368

0800014c <isButtonPress>:
int keybuffer[NUM_OF_BUTTONS];
int counter_Button[NUM_OF_BUTTONS];
int flagforLongPress[NUM_OF_BUTTONS];
int flagforPress[NUM_OF_BUTTONS];

int isButtonPress(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (flagforPress[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPress+0x22>
		flagforPress[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000094 	.word	0x20000094

08000180 <isButtonLongPress>:

int isButtonLongPress(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	return (flagforLongPress[index] == 1);
 8000188:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <isButtonLongPress+0x24>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	bf0c      	ite	eq
 8000194:	2301      	moveq	r3, #1
 8000196:	2300      	movne	r3, #0
 8000198:	b2db      	uxtb	r3, r3
}
 800019a:	4618      	mov	r0, r3
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	20000084 	.word	0x20000084

080001a8 <button_read>:

void button_read(){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < NUM_OF_BUTTONS; i++){
 80001ae:	2300      	movs	r3, #0
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	e08c      	b.n	80002ce <button_read+0x126>
		key1[i] = key2[i];
 80001b4:	4a4a      	ldr	r2, [pc, #296]	; (80002e0 <button_read+0x138>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001bc:	4949      	ldr	r1, [pc, #292]	; (80002e4 <button_read+0x13c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (i == 0){
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d109      	bne.n	80001de <button_read+0x36>
			key2[i] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001ca:	2102      	movs	r1, #2
 80001cc:	4846      	ldr	r0, [pc, #280]	; (80002e8 <button_read+0x140>)
 80001ce:	f001 fd45 	bl	8001c5c <HAL_GPIO_ReadPin>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4619      	mov	r1, r3
 80001d6:	4a42      	ldr	r2, [pc, #264]	; (80002e0 <button_read+0x138>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if (i == 1){
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d109      	bne.n	80001f8 <button_read+0x50>
			key2[i] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001e4:	2104      	movs	r1, #4
 80001e6:	4840      	ldr	r0, [pc, #256]	; (80002e8 <button_read+0x140>)
 80001e8:	f001 fd38 	bl	8001c5c <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4619      	mov	r1, r3
 80001f0:	4a3b      	ldr	r2, [pc, #236]	; (80002e0 <button_read+0x138>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if (i == 2){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d109      	bne.n	8000212 <button_read+0x6a>
			key2[i] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80001fe:	2108      	movs	r1, #8
 8000200:	4839      	ldr	r0, [pc, #228]	; (80002e8 <button_read+0x140>)
 8000202:	f001 fd2b 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	4619      	mov	r1, r3
 800020a:	4a35      	ldr	r2, [pc, #212]	; (80002e0 <button_read+0x138>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if (i == 3){
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2b03      	cmp	r3, #3
 8000216:	d109      	bne.n	800022c <button_read+0x84>
			key2[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 8000218:	2110      	movs	r1, #16
 800021a:	4833      	ldr	r0, [pc, #204]	; (80002e8 <button_read+0x140>)
 800021c:	f001 fd1e 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	4619      	mov	r1, r3
 8000224:	4a2e      	ldr	r2, [pc, #184]	; (80002e0 <button_read+0x138>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if (key2[i] == key1[i]){
 800022c:	4a2c      	ldr	r2, [pc, #176]	; (80002e0 <button_read+0x138>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	492b      	ldr	r1, [pc, #172]	; (80002e4 <button_read+0x13c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d143      	bne.n	80002c8 <button_read+0x120>
				if (keybuffer[i] != key2[i]){
 8000240:	4a2a      	ldr	r2, [pc, #168]	; (80002ec <button_read+0x144>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4925      	ldr	r1, [pc, #148]	; (80002e0 <button_read+0x138>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	d01e      	beq.n	8000292 <button_read+0xea>
					keybuffer[i] = key2[i];
 8000254:	4a22      	ldr	r2, [pc, #136]	; (80002e0 <button_read+0x138>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	4923      	ldr	r1, [pc, #140]	; (80002ec <button_read+0x144>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (keybuffer[i] == BUTTON_PRESSED){
 8000264:	4a21      	ldr	r2, [pc, #132]	; (80002ec <button_read+0x144>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d105      	bne.n	800027c <button_read+0xd4>
						flagforPress[i] = 1;
 8000270:	4a1f      	ldr	r2, [pc, #124]	; (80002f0 <button_read+0x148>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2101      	movs	r1, #1
 8000276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800027a:	e025      	b.n	80002c8 <button_read+0x120>
					} else {
						flagforLongPress[i] = 0;
 800027c:	4a1d      	ldr	r2, [pc, #116]	; (80002f4 <button_read+0x14c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2100      	movs	r1, #0
 8000282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counter_Button[i] = 0;
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <button_read+0x150>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2100      	movs	r1, #0
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000290:	e01a      	b.n	80002c8 <button_read+0x120>
					}
				} else {
					if (keybuffer[i] == BUTTON_PRESSED){
 8000292:	4a16      	ldr	r2, [pc, #88]	; (80002ec <button_read+0x144>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d114      	bne.n	80002c8 <button_read+0x120>
						if (counter_Button[i] < TIME_FOR_LONGPRESS ){
 800029e:	4a16      	ldr	r2, [pc, #88]	; (80002f8 <button_read+0x150>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a6:	2b95      	cmp	r3, #149	; 0x95
 80002a8:	dc09      	bgt.n	80002be <button_read+0x116>
							counter_Button[i]++;
 80002aa:	4a13      	ldr	r2, [pc, #76]	; (80002f8 <button_read+0x150>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	4910      	ldr	r1, [pc, #64]	; (80002f8 <button_read+0x150>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80002bc:	e004      	b.n	80002c8 <button_read+0x120>
						} else {
							flagforLongPress[i] = 1;
 80002be:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <button_read+0x14c>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2101      	movs	r1, #1
 80002c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < NUM_OF_BUTTONS; i++){
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	f77f af6f 	ble.w	80001b4 <button_read+0xc>
						}
					}
				}
		}
	}
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000054 	.word	0x20000054
 80002e4:	20000044 	.word	0x20000044
 80002e8:	40010800 	.word	0x40010800
 80002ec:	20000064 	.word	0x20000064
 80002f0:	20000094 	.word	0x20000094
 80002f4:	20000084 	.word	0x20000084
 80002f8:	20000074 	.word	0x20000074

080002fc <fsm_auto_run>:
 */

#include "fsm_auto.h"


void fsm_auto_run(){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	switch (status){
 8000300:	4bba      	ldr	r3, [pc, #744]	; (80005ec <fsm_auto_run+0x2f0>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b04      	cmp	r3, #4
 8000306:	f200 818c 	bhi.w	8000622 <fsm_auto_run+0x326>
 800030a:	a201      	add	r2, pc, #4	; (adr r2, 8000310 <fsm_auto_run+0x14>)
 800030c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000310:	08000325 	.word	0x08000325
 8000314:	0800034d 	.word	0x0800034d
 8000318:	080003ef 	.word	0x080003ef
 800031c:	08000499 	.word	0x08000499
 8000320:	08000541 	.word	0x08000541
		case INIT:
			setTimer1(green_time_2 * 1000);
 8000324:	4bb2      	ldr	r3, [pc, #712]	; (80005f0 <fsm_auto_run+0x2f4>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	4618      	mov	r0, r3
 8000332:	f001 f833 	bl	800139c <setTimer1>
			setTimer2(10);
 8000336:	200a      	movs	r0, #10
 8000338:	f001 f84c 	bl	80013d4 <setTimer2>
			status = RED1_GREEN2;
 800033c:	4bab      	ldr	r3, [pc, #684]	; (80005ec <fsm_auto_run+0x2f0>)
 800033e:	2201      	movs	r2, #1
 8000340:	601a      	str	r2, [r3, #0]
			time_of_light = red_time_1;
 8000342:	4bac      	ldr	r3, [pc, #688]	; (80005f4 <fsm_auto_run+0x2f8>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4aac      	ldr	r2, [pc, #688]	; (80005f8 <fsm_auto_run+0x2fc>)
 8000348:	6013      	str	r3, [r2, #0]
			break;
 800034a:	e16a      	b.n	8000622 <fsm_auto_run+0x326>

		case RED1_GREEN2:
			setLEDRED1();
 800034c:	f000 fcb8 	bl	8000cc0 <setLEDRED1>
			setLEDGREEN2();
 8000350:	f000 fd10 	bl	8000d74 <setLEDGREEN2>
			if (timer1_flag == 1){
 8000354:	4ba9      	ldr	r3, [pc, #676]	; (80005fc <fsm_auto_run+0x300>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d10e      	bne.n	800037a <fsm_auto_run+0x7e>
				setTimer1(yellow_time_2 * 1000);
 800035c:	4ba8      	ldr	r3, [pc, #672]	; (8000600 <fsm_auto_run+0x304>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000364:	fb02 f303 	mul.w	r3, r2, r3
 8000368:	4618      	mov	r0, r3
 800036a:	f001 f817 	bl	800139c <setTimer1>
				setTimer2(10);
 800036e:	200a      	movs	r0, #10
 8000370:	f001 f830 	bl	80013d4 <setTimer2>
				status = RED1_YELLOW2;
 8000374:	4b9d      	ldr	r3, [pc, #628]	; (80005ec <fsm_auto_run+0x2f0>)
 8000376:	2202      	movs	r2, #2
 8000378:	601a      	str	r2, [r3, #0]
			}

			if (timer2_flag == 1){
 800037a:	4ba2      	ldr	r3, [pc, #648]	; (8000604 <fsm_auto_run+0x308>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d121      	bne.n	80003c6 <fsm_auto_run+0xca>
				setTimer2(1000);
 8000382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000386:	f001 f825 	bl	80013d4 <setTimer2>
				display7SEG_a(time_of_light / 10);
 800038a:	4b9b      	ldr	r3, [pc, #620]	; (80005f8 <fsm_auto_run+0x2fc>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a9e      	ldr	r2, [pc, #632]	; (8000608 <fsm_auto_run+0x30c>)
 8000390:	fb82 1203 	smull	r1, r2, r2, r3
 8000394:	1092      	asrs	r2, r2, #2
 8000396:	17db      	asrs	r3, r3, #31
 8000398:	1ad3      	subs	r3, r2, r3
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fd68 	bl	8000e70 <display7SEG_a>
				display7SEG_b(time_of_light-- %10);
 80003a0:	4b95      	ldr	r3, [pc, #596]	; (80005f8 <fsm_auto_run+0x2fc>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	1e53      	subs	r3, r2, #1
 80003a6:	4994      	ldr	r1, [pc, #592]	; (80005f8 <fsm_auto_run+0x2fc>)
 80003a8:	600b      	str	r3, [r1, #0]
 80003aa:	4b97      	ldr	r3, [pc, #604]	; (8000608 <fsm_auto_run+0x30c>)
 80003ac:	fb83 1302 	smull	r1, r3, r3, r2
 80003b0:	1099      	asrs	r1, r3, #2
 80003b2:	17d3      	asrs	r3, r2, #31
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	460b      	mov	r3, r1
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	440b      	add	r3, r1
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	1ad1      	subs	r1, r2, r3
 80003c0:	4608      	mov	r0, r1
 80003c2:	f000 fdd3 	bl	8000f6c <display7SEG_b>
			}

			if (isButtonPress(1)){
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff fec0 	bl	800014c <isButtonPress>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	f000 810a 	beq.w	80005e8 <fsm_auto_run+0x2ec>
				setTimer1(time_man_mode * 1000);
 80003d4:	4b8d      	ldr	r3, [pc, #564]	; (800060c <fsm_auto_run+0x310>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003dc:	fb02 f303 	mul.w	r3, r2, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 ffdb 	bl	800139c <setTimer1>
				status = MAN_RED1_GREEN2;
 80003e6:	4b81      	ldr	r3, [pc, #516]	; (80005ec <fsm_auto_run+0x2f0>)
 80003e8:	2214      	movs	r2, #20
 80003ea:	601a      	str	r2, [r3, #0]
			}
			break;
 80003ec:	e0fc      	b.n	80005e8 <fsm_auto_run+0x2ec>

		case RED1_YELLOW2:
			setLEDRED1();
 80003ee:	f000 fc67 	bl	8000cc0 <setLEDRED1>
			setLEDYELLOW2();
 80003f2:	f000 fcad 	bl	8000d50 <setLEDYELLOW2>

			if (timer1_flag == 1){
 80003f6:	4b81      	ldr	r3, [pc, #516]	; (80005fc <fsm_auto_run+0x300>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d112      	bne.n	8000424 <fsm_auto_run+0x128>
				setTimer1(green_time_1 * 1000);
 80003fe:	4b84      	ldr	r3, [pc, #528]	; (8000610 <fsm_auto_run+0x314>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000406:	fb02 f303 	mul.w	r3, r2, r3
 800040a:	4618      	mov	r0, r3
 800040c:	f000 ffc6 	bl	800139c <setTimer1>
				setTimer2(10);
 8000410:	200a      	movs	r0, #10
 8000412:	f000 ffdf 	bl	80013d4 <setTimer2>
				time_of_light = green_time_1;
 8000416:	4b7e      	ldr	r3, [pc, #504]	; (8000610 <fsm_auto_run+0x314>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a77      	ldr	r2, [pc, #476]	; (80005f8 <fsm_auto_run+0x2fc>)
 800041c:	6013      	str	r3, [r2, #0]
				status = GREEN1_RED2;
 800041e:	4b73      	ldr	r3, [pc, #460]	; (80005ec <fsm_auto_run+0x2f0>)
 8000420:	2203      	movs	r2, #3
 8000422:	601a      	str	r2, [r3, #0]
			}

			if (timer2_flag == 1){
 8000424:	4b77      	ldr	r3, [pc, #476]	; (8000604 <fsm_auto_run+0x308>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d121      	bne.n	8000470 <fsm_auto_run+0x174>
				setTimer2(1000);
 800042c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000430:	f000 ffd0 	bl	80013d4 <setTimer2>
				display7SEG_a(time_of_light / 10);
 8000434:	4b70      	ldr	r3, [pc, #448]	; (80005f8 <fsm_auto_run+0x2fc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a73      	ldr	r2, [pc, #460]	; (8000608 <fsm_auto_run+0x30c>)
 800043a:	fb82 1203 	smull	r1, r2, r2, r3
 800043e:	1092      	asrs	r2, r2, #2
 8000440:	17db      	asrs	r3, r3, #31
 8000442:	1ad3      	subs	r3, r2, r3
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fd13 	bl	8000e70 <display7SEG_a>
				display7SEG_b(time_of_light-- %10);
 800044a:	4b6b      	ldr	r3, [pc, #428]	; (80005f8 <fsm_auto_run+0x2fc>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	1e53      	subs	r3, r2, #1
 8000450:	4969      	ldr	r1, [pc, #420]	; (80005f8 <fsm_auto_run+0x2fc>)
 8000452:	600b      	str	r3, [r1, #0]
 8000454:	4b6c      	ldr	r3, [pc, #432]	; (8000608 <fsm_auto_run+0x30c>)
 8000456:	fb83 1302 	smull	r1, r3, r3, r2
 800045a:	1099      	asrs	r1, r3, #2
 800045c:	17d3      	asrs	r3, r2, #31
 800045e:	1ac9      	subs	r1, r1, r3
 8000460:	460b      	mov	r3, r1
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	440b      	add	r3, r1
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	1ad1      	subs	r1, r2, r3
 800046a:	4608      	mov	r0, r1
 800046c:	f000 fd7e 	bl	8000f6c <display7SEG_b>
			}

			if (isButtonPress(1)){
 8000470:	2001      	movs	r0, #1
 8000472:	f7ff fe6b 	bl	800014c <isButtonPress>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	f000 80cd 	beq.w	8000618 <fsm_auto_run+0x31c>
				setTimer1(time_man_mode * 1000);
 800047e:	4b63      	ldr	r3, [pc, #396]	; (800060c <fsm_auto_run+0x310>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000486:	fb02 f303 	mul.w	r3, r2, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f000 ff86 	bl	800139c <setTimer1>
				status = MAN_RED1_YELLOW2;
 8000490:	4b56      	ldr	r3, [pc, #344]	; (80005ec <fsm_auto_run+0x2f0>)
 8000492:	2215      	movs	r2, #21
 8000494:	601a      	str	r2, [r3, #0]
			}
			break;
 8000496:	e0bf      	b.n	8000618 <fsm_auto_run+0x31c>

		case GREEN1_RED2:
			setLEDRED2();
 8000498:	f000 fc48 	bl	8000d2c <setLEDRED2>
			setLEDGREEN1();
 800049c:	f000 fc34 	bl	8000d08 <setLEDGREEN1>

			if (timer1_flag == 1){
 80004a0:	4b56      	ldr	r3, [pc, #344]	; (80005fc <fsm_auto_run+0x300>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d112      	bne.n	80004ce <fsm_auto_run+0x1d2>
				setTimer1(yellow_time_1 * 1000);
 80004a8:	4b5a      	ldr	r3, [pc, #360]	; (8000614 <fsm_auto_run+0x318>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004b0:	fb02 f303 	mul.w	r3, r2, r3
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 ff71 	bl	800139c <setTimer1>
				setTimer2(10);
 80004ba:	200a      	movs	r0, #10
 80004bc:	f000 ff8a 	bl	80013d4 <setTimer2>
				time_of_light = yellow_time_1;
 80004c0:	4b54      	ldr	r3, [pc, #336]	; (8000614 <fsm_auto_run+0x318>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a4c      	ldr	r2, [pc, #304]	; (80005f8 <fsm_auto_run+0x2fc>)
 80004c6:	6013      	str	r3, [r2, #0]
				status = YELLOW1_RED2;
 80004c8:	4b48      	ldr	r3, [pc, #288]	; (80005ec <fsm_auto_run+0x2f0>)
 80004ca:	2204      	movs	r2, #4
 80004cc:	601a      	str	r2, [r3, #0]
			}

			if (timer2_flag == 1){
 80004ce:	4b4d      	ldr	r3, [pc, #308]	; (8000604 <fsm_auto_run+0x308>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d121      	bne.n	800051a <fsm_auto_run+0x21e>
				setTimer2(1000);
 80004d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004da:	f000 ff7b 	bl	80013d4 <setTimer2>
				display7SEG_a(time_of_light / 10);
 80004de:	4b46      	ldr	r3, [pc, #280]	; (80005f8 <fsm_auto_run+0x2fc>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a49      	ldr	r2, [pc, #292]	; (8000608 <fsm_auto_run+0x30c>)
 80004e4:	fb82 1203 	smull	r1, r2, r2, r3
 80004e8:	1092      	asrs	r2, r2, #2
 80004ea:	17db      	asrs	r3, r3, #31
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 fcbe 	bl	8000e70 <display7SEG_a>
				display7SEG_b(time_of_light-- %10);
 80004f4:	4b40      	ldr	r3, [pc, #256]	; (80005f8 <fsm_auto_run+0x2fc>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	1e53      	subs	r3, r2, #1
 80004fa:	493f      	ldr	r1, [pc, #252]	; (80005f8 <fsm_auto_run+0x2fc>)
 80004fc:	600b      	str	r3, [r1, #0]
 80004fe:	4b42      	ldr	r3, [pc, #264]	; (8000608 <fsm_auto_run+0x30c>)
 8000500:	fb83 1302 	smull	r1, r3, r3, r2
 8000504:	1099      	asrs	r1, r3, #2
 8000506:	17d3      	asrs	r3, r2, #31
 8000508:	1ac9      	subs	r1, r1, r3
 800050a:	460b      	mov	r3, r1
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	440b      	add	r3, r1
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	1ad1      	subs	r1, r2, r3
 8000514:	4608      	mov	r0, r1
 8000516:	f000 fd29 	bl	8000f6c <display7SEG_b>
			}

			if (isButtonPress(1)){
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff fe16 	bl	800014c <isButtonPress>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d07a      	beq.n	800061c <fsm_auto_run+0x320>
				setTimer1(time_man_mode * 1000);
 8000526:	4b39      	ldr	r3, [pc, #228]	; (800060c <fsm_auto_run+0x310>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800052e:	fb02 f303 	mul.w	r3, r2, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 ff32 	bl	800139c <setTimer1>

				status = MAN_GREEN1_RED2;
 8000538:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <fsm_auto_run+0x2f0>)
 800053a:	2216      	movs	r2, #22
 800053c:	601a      	str	r2, [r3, #0]
			}
			break;
 800053e:	e06d      	b.n	800061c <fsm_auto_run+0x320>

		case YELLOW1_RED2:
			setLEDRED2();
 8000540:	f000 fbf4 	bl	8000d2c <setLEDRED2>
			setLEDYELLOW1();
 8000544:	f000 fbce 	bl	8000ce4 <setLEDYELLOW1>

			if (timer1_flag == 1){
 8000548:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <fsm_auto_run+0x300>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d112      	bne.n	8000576 <fsm_auto_run+0x27a>
				setTimer1(green_time_2 * 1000);
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <fsm_auto_run+0x2f4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000558:	fb02 f303 	mul.w	r3, r2, r3
 800055c:	4618      	mov	r0, r3
 800055e:	f000 ff1d 	bl	800139c <setTimer1>
				setTimer2(10);
 8000562:	200a      	movs	r0, #10
 8000564:	f000 ff36 	bl	80013d4 <setTimer2>
				time_of_light = red_time_1;
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <fsm_auto_run+0x2f8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <fsm_auto_run+0x2fc>)
 800056e:	6013      	str	r3, [r2, #0]
				status = RED1_GREEN2;
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <fsm_auto_run+0x2f0>)
 8000572:	2201      	movs	r2, #1
 8000574:	601a      	str	r2, [r3, #0]
			}
			if (timer2_flag == 1){
 8000576:	4b23      	ldr	r3, [pc, #140]	; (8000604 <fsm_auto_run+0x308>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d121      	bne.n	80005c2 <fsm_auto_run+0x2c6>
				setTimer2(1000);
 800057e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000582:	f000 ff27 	bl	80013d4 <setTimer2>
				display7SEG_a(time_of_light / 10);
 8000586:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <fsm_auto_run+0x2fc>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <fsm_auto_run+0x30c>)
 800058c:	fb82 1203 	smull	r1, r2, r2, r3
 8000590:	1092      	asrs	r2, r2, #2
 8000592:	17db      	asrs	r3, r3, #31
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fc6a 	bl	8000e70 <display7SEG_a>
				display7SEG_b(time_of_light-- %10);
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <fsm_auto_run+0x2fc>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	1e53      	subs	r3, r2, #1
 80005a2:	4915      	ldr	r1, [pc, #84]	; (80005f8 <fsm_auto_run+0x2fc>)
 80005a4:	600b      	str	r3, [r1, #0]
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <fsm_auto_run+0x30c>)
 80005a8:	fb83 1302 	smull	r1, r3, r3, r2
 80005ac:	1099      	asrs	r1, r3, #2
 80005ae:	17d3      	asrs	r3, r2, #31
 80005b0:	1ac9      	subs	r1, r1, r3
 80005b2:	460b      	mov	r3, r1
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	440b      	add	r3, r1
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	1ad1      	subs	r1, r2, r3
 80005bc:	4608      	mov	r0, r1
 80005be:	f000 fcd5 	bl	8000f6c <display7SEG_b>
			}

			if (isButtonPress(1)){
 80005c2:	2001      	movs	r0, #1
 80005c4:	f7ff fdc2 	bl	800014c <isButtonPress>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d028      	beq.n	8000620 <fsm_auto_run+0x324>
				setTimer1(time_man_mode * 1000);
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <fsm_auto_run+0x310>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005d6:	fb02 f303 	mul.w	r3, r2, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fede 	bl	800139c <setTimer1>

				status = MAN_YELLOW1_RED2;
 80005e0:	4b02      	ldr	r3, [pc, #8]	; (80005ec <fsm_auto_run+0x2f0>)
 80005e2:	2217      	movs	r2, #23
 80005e4:	601a      	str	r2, [r3, #0]
			}
			break;
 80005e6:	e01b      	b.n	8000620 <fsm_auto_run+0x324>
			break;
 80005e8:	bf00      	nop
 80005ea:	e01a      	b.n	8000622 <fsm_auto_run+0x326>
 80005ec:	200000a8 	.word	0x200000a8
 80005f0:	20000010 	.word	0x20000010
 80005f4:	20000000 	.word	0x20000000
 80005f8:	200000ac 	.word	0x200000ac
 80005fc:	20000150 	.word	0x20000150
 8000600:	20000014 	.word	0x20000014
 8000604:	20000158 	.word	0x20000158
 8000608:	66666667 	.word	0x66666667
 800060c:	20000018 	.word	0x20000018
 8000610:	20000004 	.word	0x20000004
 8000614:	20000008 	.word	0x20000008
			break;
 8000618:	bf00      	nop
 800061a:	e002      	b.n	8000622 <fsm_auto_run+0x326>
			break;
 800061c:	bf00      	nop
 800061e:	e000      	b.n	8000622 <fsm_auto_run+0x326>
			break;
 8000620:	bf00      	nop
	}
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop

08000628 <fsm_manual_run>:
 */

#include "fsm_manual.h"


void fsm_manual_run(){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	switch(status){
 800062c:	4b68      	ldr	r3, [pc, #416]	; (80007d0 <fsm_manual_run+0x1a8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3b14      	subs	r3, #20
 8000632:	2b03      	cmp	r3, #3
 8000634:	f200 80c1 	bhi.w	80007ba <fsm_manual_run+0x192>
 8000638:	a201      	add	r2, pc, #4	; (adr r2, 8000640 <fsm_manual_run+0x18>)
 800063a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063e:	bf00      	nop
 8000640:	08000651 	.word	0x08000651
 8000644:	080006af 	.word	0x080006af
 8000648:	08000707 	.word	0x08000707
 800064c:	08000763 	.word	0x08000763

		case MAN_RED1_GREEN2:
			setLEDRED1();
 8000650:	f000 fb36 	bl	8000cc0 <setLEDRED1>
			setLEDGREEN2();
 8000654:	f000 fb8e 	bl	8000d74 <setLEDGREEN2>
			if(timer1_flag == 1){
 8000658:	4b5e      	ldr	r3, [pc, #376]	; (80007d4 <fsm_manual_run+0x1ac>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d106      	bne.n	800066e <fsm_manual_run+0x46>
				status=RED1_GREEN2;
 8000660:	4b5b      	ldr	r3, [pc, #364]	; (80007d0 <fsm_manual_run+0x1a8>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
				setTimer1(3000);
 8000666:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800066a:	f000 fe97 	bl	800139c <setTimer1>
			}

			if(isButtonPress(2)){
 800066e:	2002      	movs	r0, #2
 8000670:	f7ff fd6c 	bl	800014c <isButtonPress>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00b      	beq.n	8000692 <fsm_manual_run+0x6a>
				status=MAN_RED1_YELLOW2;
 800067a:	4b55      	ldr	r3, [pc, #340]	; (80007d0 <fsm_manual_run+0x1a8>)
 800067c:	2215      	movs	r2, #21
 800067e:	601a      	str	r2, [r3, #0]
				setTimer1(time_man_mode * 1000);
 8000680:	4b55      	ldr	r3, [pc, #340]	; (80007d8 <fsm_manual_run+0x1b0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fe85 	bl	800139c <setTimer1>
			}

			if (isButtonPress(1)){
 8000692:	2001      	movs	r0, #1
 8000694:	f7ff fd5a 	bl	800014c <isButtonPress>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	f000 808f 	beq.w	80007be <fsm_manual_run+0x196>
				status = TUNING_RED1;
 80006a0:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <fsm_manual_run+0x1a8>)
 80006a2:	2228      	movs	r2, #40	; 0x28
 80006a4:	601a      	str	r2, [r3, #0]
				setTimer1(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f000 fe78 	bl	800139c <setTimer1>
			}

			break;
 80006ac:	e087      	b.n	80007be <fsm_manual_run+0x196>

		case MAN_RED1_YELLOW2:
			setLEDYELLOW2();
 80006ae:	f000 fb4f 	bl	8000d50 <setLEDYELLOW2>
			if(timer1_flag==1){
 80006b2:	4b48      	ldr	r3, [pc, #288]	; (80007d4 <fsm_manual_run+0x1ac>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d106      	bne.n	80006c8 <fsm_manual_run+0xa0>
				status=RED1_YELLOW2;
 80006ba:	4b45      	ldr	r3, [pc, #276]	; (80007d0 <fsm_manual_run+0x1a8>)
 80006bc:	2202      	movs	r2, #2
 80006be:	601a      	str	r2, [r3, #0]
				setTimer1(2000);
 80006c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c4:	f000 fe6a 	bl	800139c <setTimer1>
			}

			if(isButtonPress(2)){
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff fd3f 	bl	800014c <isButtonPress>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00b      	beq.n	80006ec <fsm_manual_run+0xc4>
				status=MAN_GREEN1_RED2;
 80006d4:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <fsm_manual_run+0x1a8>)
 80006d6:	2216      	movs	r2, #22
 80006d8:	601a      	str	r2, [r3, #0]
				setTimer1(time_man_mode * 1000);
 80006da:	4b3f      	ldr	r3, [pc, #252]	; (80007d8 <fsm_manual_run+0x1b0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e2:	fb02 f303 	mul.w	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fe58 	bl	800139c <setTimer1>
			}

			if (isButtonPress(1)){
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff fd2d 	bl	800014c <isButtonPress>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d064      	beq.n	80007c2 <fsm_manual_run+0x19a>
				status = TUNING_RED1;
 80006f8:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <fsm_manual_run+0x1a8>)
 80006fa:	2228      	movs	r2, #40	; 0x28
 80006fc:	601a      	str	r2, [r3, #0]
				setTimer1(10);
 80006fe:	200a      	movs	r0, #10
 8000700:	f000 fe4c 	bl	800139c <setTimer1>
			}

			break;
 8000704:	e05d      	b.n	80007c2 <fsm_manual_run+0x19a>

		case MAN_GREEN1_RED2:
			setLEDGREEN1();
 8000706:	f000 faff 	bl	8000d08 <setLEDGREEN1>
			setLEDRED2();
 800070a:	f000 fb0f 	bl	8000d2c <setLEDRED2>
			if(timer1_flag==1){
 800070e:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <fsm_manual_run+0x1ac>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d106      	bne.n	8000724 <fsm_manual_run+0xfc>
				status=GREEN1_RED2;
 8000716:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <fsm_manual_run+0x1a8>)
 8000718:	2203      	movs	r2, #3
 800071a:	601a      	str	r2, [r3, #0]
				setTimer1(3000);
 800071c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000720:	f000 fe3c 	bl	800139c <setTimer1>
			}

			if(isButtonPress(2)){
 8000724:	2002      	movs	r0, #2
 8000726:	f7ff fd11 	bl	800014c <isButtonPress>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00b      	beq.n	8000748 <fsm_manual_run+0x120>
				status=MAN_YELLOW1_RED2;
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <fsm_manual_run+0x1a8>)
 8000732:	2217      	movs	r2, #23
 8000734:	601a      	str	r2, [r3, #0]
				setTimer1(time_man_mode * 1000);
 8000736:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <fsm_manual_run+0x1b0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fe2a 	bl	800139c <setTimer1>
			}

			if (isButtonPress(1)){
 8000748:	2001      	movs	r0, #1
 800074a:	f7ff fcff 	bl	800014c <isButtonPress>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d038      	beq.n	80007c6 <fsm_manual_run+0x19e>
				status = TUNING_RED1;
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <fsm_manual_run+0x1a8>)
 8000756:	2228      	movs	r2, #40	; 0x28
 8000758:	601a      	str	r2, [r3, #0]
				setTimer1(10);
 800075a:	200a      	movs	r0, #10
 800075c:	f000 fe1e 	bl	800139c <setTimer1>
			}

			break;
 8000760:	e031      	b.n	80007c6 <fsm_manual_run+0x19e>

		case MAN_YELLOW1_RED2:
			setLEDYELLOW1();
 8000762:	f000 fabf 	bl	8000ce4 <setLEDYELLOW1>

			if(timer1_flag==1){
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <fsm_manual_run+0x1ac>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d106      	bne.n	800077c <fsm_manual_run+0x154>
				status=YELLOW1_RED2;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <fsm_manual_run+0x1a8>)
 8000770:	2204      	movs	r2, #4
 8000772:	601a      	str	r2, [r3, #0]
				setTimer1(2000);
 8000774:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000778:	f000 fe10 	bl	800139c <setTimer1>
			}

			if(isButtonPress(2)){
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff fce5 	bl	800014c <isButtonPress>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <fsm_manual_run+0x178>
				status=MAN_RED1_GREEN2;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <fsm_manual_run+0x1a8>)
 800078a:	2214      	movs	r2, #20
 800078c:	601a      	str	r2, [r3, #0]
				setTimer1(time_man_mode * 1000);
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <fsm_manual_run+0x1b0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000796:	fb02 f303 	mul.w	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fdfe 	bl	800139c <setTimer1>
			}

			if (isButtonPress(1)){
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff fcd3 	bl	800014c <isButtonPress>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00e      	beq.n	80007ca <fsm_manual_run+0x1a2>
				status = TUNING_RED1;
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <fsm_manual_run+0x1a8>)
 80007ae:	2228      	movs	r2, #40	; 0x28
 80007b0:	601a      	str	r2, [r3, #0]
				setTimer1(10);
 80007b2:	200a      	movs	r0, #10
 80007b4:	f000 fdf2 	bl	800139c <setTimer1>
			}

			break;
 80007b8:	e007      	b.n	80007ca <fsm_manual_run+0x1a2>

		default:
			break;
 80007ba:	bf00      	nop
 80007bc:	e006      	b.n	80007cc <fsm_manual_run+0x1a4>
			break;
 80007be:	bf00      	nop
 80007c0:	e004      	b.n	80007cc <fsm_manual_run+0x1a4>
			break;
 80007c2:	bf00      	nop
 80007c4:	e002      	b.n	80007cc <fsm_manual_run+0x1a4>
			break;
 80007c6:	bf00      	nop
 80007c8:	e000      	b.n	80007cc <fsm_manual_run+0x1a4>
			break;
 80007ca:	bf00      	nop
	}
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000a8 	.word	0x200000a8
 80007d4:	20000150 	.word	0x20000150
 80007d8:	20000018 	.word	0x20000018

080007dc <fsm_pedes_run>:
 */


#include "fsm_pedes.h"

void fsm_pedes_run(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	switch (status_pedes){
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <fsm_pedes_run+0x7c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b32      	cmp	r3, #50	; 0x32
 80007e6:	d002      	beq.n	80007ee <fsm_pedes_run+0x12>
 80007e8:	2b33      	cmp	r3, #51	; 0x33
 80007ea:	d018      	beq.n	800081e <fsm_pedes_run+0x42>
			}

			break;

	}
}
 80007ec:	e032      	b.n	8000854 <fsm_pedes_run+0x78>
			clearLED3();
 80007ee:	f000 fb2d 	bl	8000e4c <clearLED3>
			if (isButtonPress(0)){
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff fcaa 	bl	800014c <isButtonPress>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d027      	beq.n	800084e <fsm_pedes_run+0x72>
				setTimer2((red_time_1 + red_time_2) * 2 * 1000);
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <fsm_pedes_run+0x80>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <fsm_pedes_run+0x84>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800080c:	fb02 f303 	mul.w	r3, r2, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fddf 	bl	80013d4 <setTimer2>
				status_pedes = PEDES_RUN;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <fsm_pedes_run+0x7c>)
 8000818:	2233      	movs	r2, #51	; 0x33
 800081a:	601a      	str	r2, [r3, #0]
			break;
 800081c:	e017      	b.n	800084e <fsm_pedes_run+0x72>
			if (status == GREEN1_RED2){
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <fsm_pedes_run+0x88>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b03      	cmp	r3, #3
 8000824:	d102      	bne.n	800082c <fsm_pedes_run+0x50>
				setLEDRED3();
 8000826:	f000 fab7 	bl	8000d98 <setLEDRED3>
 800082a:	e008      	b.n	800083e <fsm_pedes_run+0x62>
			} else if (status == YELLOW1_RED2){
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <fsm_pedes_run+0x88>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b04      	cmp	r3, #4
 8000832:	d102      	bne.n	800083a <fsm_pedes_run+0x5e>
				setLEDYELLOW3();
 8000834:	f000 fac2 	bl	8000dbc <setLEDYELLOW3>
 8000838:	e001      	b.n	800083e <fsm_pedes_run+0x62>
				setLEDGREEN3();
 800083a:	f000 fad1 	bl	8000de0 <setLEDGREEN3>
			if (timer2_flag == 1){
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <fsm_pedes_run+0x8c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d105      	bne.n	8000852 <fsm_pedes_run+0x76>
				status = INIT_PEDES;
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <fsm_pedes_run+0x88>)
 8000848:	2232      	movs	r2, #50	; 0x32
 800084a:	601a      	str	r2, [r3, #0]
			break;
 800084c:	e001      	b.n	8000852 <fsm_pedes_run+0x76>
			break;
 800084e:	bf00      	nop
 8000850:	e000      	b.n	8000854 <fsm_pedes_run+0x78>
			break;
 8000852:	bf00      	nop
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000a4 	.word	0x200000a4
 800085c:	20000000 	.word	0x20000000
 8000860:	2000000c 	.word	0x2000000c
 8000864:	200000a8 	.word	0x200000a8
 8000868:	20000158 	.word	0x20000158

0800086c <fsm_tuning_run>:

#include "fsm_tuning.h"



void fsm_tuning_run(){
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	switch(status){
 8000870:	4b7d      	ldr	r3, [pc, #500]	; (8000a68 <fsm_tuning_run+0x1fc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3b28      	subs	r3, #40	; 0x28
 8000876:	2b03      	cmp	r3, #3
 8000878:	f200 8201 	bhi.w	8000c7e <fsm_tuning_run+0x412>
 800087c:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <fsm_tuning_run+0x18>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	08000895 	.word	0x08000895
 8000888:	0800097f 	.word	0x0800097f
 800088c:	08000a85 	.word	0x08000a85
 8000890:	08000b7d 	.word	0x08000b7d

		case TUNING_RED1:
			setLEDRED1();
 8000894:	f000 fa14 	bl	8000cc0 <setLEDRED1>
			clearLED2();
 8000898:	f000 fac6 	bl	8000e28 <clearLED2>
			if(isButtonPress(2)){
 800089c:	2002      	movs	r0, #2
 800089e:	f7ff fc55 	bl	800014c <isButtonPress>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d01f      	beq.n	80008e8 <fsm_tuning_run+0x7c>
				RED_INC++;
 80008a8:	4b70      	ldr	r3, [pc, #448]	; (8000a6c <fsm_tuning_run+0x200>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	4a6f      	ldr	r2, [pc, #444]	; (8000a6c <fsm_tuning_run+0x200>)
 80008b0:	6013      	str	r3, [r2, #0]
				display7SEG_a(RED_INC / 10);
 80008b2:	4b6e      	ldr	r3, [pc, #440]	; (8000a6c <fsm_tuning_run+0x200>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a6e      	ldr	r2, [pc, #440]	; (8000a70 <fsm_tuning_run+0x204>)
 80008b8:	fb82 1203 	smull	r1, r2, r2, r3
 80008bc:	1092      	asrs	r2, r2, #2
 80008be:	17db      	asrs	r3, r3, #31
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fad4 	bl	8000e70 <display7SEG_a>
				display7SEG_b(RED_INC % 10);
 80008c8:	4b68      	ldr	r3, [pc, #416]	; (8000a6c <fsm_tuning_run+0x200>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b68      	ldr	r3, [pc, #416]	; (8000a70 <fsm_tuning_run+0x204>)
 80008ce:	fb83 1302 	smull	r1, r3, r3, r2
 80008d2:	1099      	asrs	r1, r3, #2
 80008d4:	17d3      	asrs	r3, r2, #31
 80008d6:	1ac9      	subs	r1, r1, r3
 80008d8:	460b      	mov	r3, r1
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	1ad1      	subs	r1, r2, r3
 80008e2:	4608      	mov	r0, r1
 80008e4:	f000 fb42 	bl	8000f6c <display7SEG_b>
			}

			if (isButtonLongPress(2)){
 80008e8:	2002      	movs	r0, #2
 80008ea:	f7ff fc49 	bl	8000180 <isButtonLongPress>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d026      	beq.n	8000942 <fsm_tuning_run+0xd6>
				if (timer1_flag == 1){
 80008f4:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <fsm_tuning_run+0x208>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d122      	bne.n	8000942 <fsm_tuning_run+0xd6>
					RED_INC--;
 80008fc:	4b5b      	ldr	r3, [pc, #364]	; (8000a6c <fsm_tuning_run+0x200>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3b01      	subs	r3, #1
 8000902:	4a5a      	ldr	r2, [pc, #360]	; (8000a6c <fsm_tuning_run+0x200>)
 8000904:	6013      	str	r3, [r2, #0]
					display7SEG_a(RED_INC / 10);
 8000906:	4b59      	ldr	r3, [pc, #356]	; (8000a6c <fsm_tuning_run+0x200>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a59      	ldr	r2, [pc, #356]	; (8000a70 <fsm_tuning_run+0x204>)
 800090c:	fb82 1203 	smull	r1, r2, r2, r3
 8000910:	1092      	asrs	r2, r2, #2
 8000912:	17db      	asrs	r3, r3, #31
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 faaa 	bl	8000e70 <display7SEG_a>
					display7SEG_b(RED_INC % 10);
 800091c:	4b53      	ldr	r3, [pc, #332]	; (8000a6c <fsm_tuning_run+0x200>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b53      	ldr	r3, [pc, #332]	; (8000a70 <fsm_tuning_run+0x204>)
 8000922:	fb83 1302 	smull	r1, r3, r3, r2
 8000926:	1099      	asrs	r1, r3, #2
 8000928:	17d3      	asrs	r3, r2, #31
 800092a:	1ac9      	subs	r1, r1, r3
 800092c:	460b      	mov	r3, r1
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	440b      	add	r3, r1
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	1ad1      	subs	r1, r2, r3
 8000936:	4608      	mov	r0, r1
 8000938:	f000 fb18 	bl	8000f6c <display7SEG_b>
					setTimer1(200);
 800093c:	20c8      	movs	r0, #200	; 0xc8
 800093e:	f000 fd2d 	bl	800139c <setTimer1>
				}
			}
			if(isButtonPress(3)){
 8000942:	2003      	movs	r0, #3
 8000944:	f7ff fc02 	bl	800014c <isButtonPress>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d006      	beq.n	800095c <fsm_tuning_run+0xf0>
				red_time_1+=RED_INC;
 800094e:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <fsm_tuning_run+0x20c>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	4b46      	ldr	r3, [pc, #280]	; (8000a6c <fsm_tuning_run+0x200>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a47      	ldr	r2, [pc, #284]	; (8000a78 <fsm_tuning_run+0x20c>)
 800095a:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(1)){
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fbf5 	bl	800014c <isButtonPress>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	f000 818c 	beq.w	8000c82 <fsm_tuning_run+0x416>
				RED_INC=0;
 800096a:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <fsm_tuning_run+0x200>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
				status=TUNING_GREEN1;
 8000970:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <fsm_tuning_run+0x1fc>)
 8000972:	2229      	movs	r2, #41	; 0x29
 8000974:	601a      	str	r2, [r3, #0]
				setTimer1(10);
 8000976:	200a      	movs	r0, #10
 8000978:	f000 fd10 	bl	800139c <setTimer1>
			}
			break;
 800097c:	e181      	b.n	8000c82 <fsm_tuning_run+0x416>

		case TUNING_GREEN1:

			setLEDGREEN1();
 800097e:	f000 f9c3 	bl	8000d08 <setLEDGREEN1>
			clearLED2();
 8000982:	f000 fa51 	bl	8000e28 <clearLED2>

			if(isButtonPress(2)){
 8000986:	2002      	movs	r0, #2
 8000988:	f7ff fbe0 	bl	800014c <isButtonPress>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d01f      	beq.n	80009d2 <fsm_tuning_run+0x166>
				GREEN_INC++;
 8000992:	4b3a      	ldr	r3, [pc, #232]	; (8000a7c <fsm_tuning_run+0x210>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	4a38      	ldr	r2, [pc, #224]	; (8000a7c <fsm_tuning_run+0x210>)
 800099a:	6013      	str	r3, [r2, #0]
				display7SEG_a(GREEN_INC / 10);
 800099c:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <fsm_tuning_run+0x210>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a33      	ldr	r2, [pc, #204]	; (8000a70 <fsm_tuning_run+0x204>)
 80009a2:	fb82 1203 	smull	r1, r2, r2, r3
 80009a6:	1092      	asrs	r2, r2, #2
 80009a8:	17db      	asrs	r3, r3, #31
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fa5f 	bl	8000e70 <display7SEG_a>
				display7SEG_b(GREEN_INC % 10);
 80009b2:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <fsm_tuning_run+0x210>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <fsm_tuning_run+0x204>)
 80009b8:	fb83 1302 	smull	r1, r3, r3, r2
 80009bc:	1099      	asrs	r1, r3, #2
 80009be:	17d3      	asrs	r3, r2, #31
 80009c0:	1ac9      	subs	r1, r1, r3
 80009c2:	460b      	mov	r3, r1
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	1ad1      	subs	r1, r2, r3
 80009cc:	4608      	mov	r0, r1
 80009ce:	f000 facd 	bl	8000f6c <display7SEG_b>
			}

			if (isButtonLongPress(2)){
 80009d2:	2002      	movs	r0, #2
 80009d4:	f7ff fbd4 	bl	8000180 <isButtonLongPress>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d026      	beq.n	8000a2c <fsm_tuning_run+0x1c0>
				if (timer1_flag == 1){
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <fsm_tuning_run+0x208>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d122      	bne.n	8000a2c <fsm_tuning_run+0x1c0>
					GREEN_INC--;
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <fsm_tuning_run+0x210>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <fsm_tuning_run+0x210>)
 80009ee:	6013      	str	r3, [r2, #0]
					display7SEG_a(GREEN_INC / 10);
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <fsm_tuning_run+0x210>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <fsm_tuning_run+0x204>)
 80009f6:	fb82 1203 	smull	r1, r2, r2, r3
 80009fa:	1092      	asrs	r2, r2, #2
 80009fc:	17db      	asrs	r3, r3, #31
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fa35 	bl	8000e70 <display7SEG_a>
					display7SEG_b(GREEN_INC % 10);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <fsm_tuning_run+0x210>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <fsm_tuning_run+0x204>)
 8000a0c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a10:	1099      	asrs	r1, r3, #2
 8000a12:	17d3      	asrs	r3, r2, #31
 8000a14:	1ac9      	subs	r1, r1, r3
 8000a16:	460b      	mov	r3, r1
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	1ad1      	subs	r1, r2, r3
 8000a20:	4608      	mov	r0, r1
 8000a22:	f000 faa3 	bl	8000f6c <display7SEG_b>
					setTimer1(200);
 8000a26:	20c8      	movs	r0, #200	; 0xc8
 8000a28:	f000 fcb8 	bl	800139c <setTimer1>
				}
			}

			if(isButtonPress(3)){
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f7ff fb8d 	bl	800014c <isButtonPress>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <fsm_tuning_run+0x1da>
				green_time_1+=GREEN_INC;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <fsm_tuning_run+0x214>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <fsm_tuning_run+0x210>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <fsm_tuning_run+0x214>)
 8000a44:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(1)){
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff fb80 	bl	800014c <isButtonPress>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 8119 	beq.w	8000c86 <fsm_tuning_run+0x41a>
				GREEN_INC=0;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <fsm_tuning_run+0x210>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
				status=TUNING_YELLOW1;
 8000a5a:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <fsm_tuning_run+0x1fc>)
 8000a5c:	222a      	movs	r2, #42	; 0x2a
 8000a5e:	601a      	str	r2, [r3, #0]
				setTimer1(10);
 8000a60:	200a      	movs	r0, #10
 8000a62:	f000 fc9b 	bl	800139c <setTimer1>
			}
			break;
 8000a66:	e10e      	b.n	8000c86 <fsm_tuning_run+0x41a>
 8000a68:	200000a8 	.word	0x200000a8
 8000a6c:	200000b0 	.word	0x200000b0
 8000a70:	66666667 	.word	0x66666667
 8000a74:	20000150 	.word	0x20000150
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	200000b8 	.word	0x200000b8
 8000a80:	20000004 	.word	0x20000004

		case TUNING_YELLOW1:
			setLEDYELLOW1();
 8000a84:	f000 f92e 	bl	8000ce4 <setLEDYELLOW1>
			clearLED2();
 8000a88:	f000 f9ce 	bl	8000e28 <clearLED2>

			if(isButtonPress(2)){
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f7ff fb5d 	bl	800014c <isButtonPress>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d01f      	beq.n	8000ad8 <fsm_tuning_run+0x26c>
				YELLOW_INC++;
 8000a98:	4b7e      	ldr	r3, [pc, #504]	; (8000c94 <fsm_tuning_run+0x428>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a7d      	ldr	r2, [pc, #500]	; (8000c94 <fsm_tuning_run+0x428>)
 8000aa0:	6013      	str	r3, [r2, #0]
				display7SEG_a(YELLOW_INC / 10);
 8000aa2:	4b7c      	ldr	r3, [pc, #496]	; (8000c94 <fsm_tuning_run+0x428>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a7c      	ldr	r2, [pc, #496]	; (8000c98 <fsm_tuning_run+0x42c>)
 8000aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8000aac:	1092      	asrs	r2, r2, #2
 8000aae:	17db      	asrs	r3, r3, #31
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f9dc 	bl	8000e70 <display7SEG_a>
				display7SEG_b(YELLOW_INC % 10);
 8000ab8:	4b76      	ldr	r3, [pc, #472]	; (8000c94 <fsm_tuning_run+0x428>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b76      	ldr	r3, [pc, #472]	; (8000c98 <fsm_tuning_run+0x42c>)
 8000abe:	fb83 1302 	smull	r1, r3, r3, r2
 8000ac2:	1099      	asrs	r1, r3, #2
 8000ac4:	17d3      	asrs	r3, r2, #31
 8000ac6:	1ac9      	subs	r1, r1, r3
 8000ac8:	460b      	mov	r3, r1
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	440b      	add	r3, r1
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	1ad1      	subs	r1, r2, r3
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	f000 fa4a 	bl	8000f6c <display7SEG_b>
			}

			if (isButtonLongPress(2)){
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f7ff fb51 	bl	8000180 <isButtonLongPress>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d026      	beq.n	8000b32 <fsm_tuning_run+0x2c6>
				if (timer1_flag == 1){
 8000ae4:	4b6d      	ldr	r3, [pc, #436]	; (8000c9c <fsm_tuning_run+0x430>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d122      	bne.n	8000b32 <fsm_tuning_run+0x2c6>
					YELLOW_INC--;
 8000aec:	4b69      	ldr	r3, [pc, #420]	; (8000c94 <fsm_tuning_run+0x428>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	4a68      	ldr	r2, [pc, #416]	; (8000c94 <fsm_tuning_run+0x428>)
 8000af4:	6013      	str	r3, [r2, #0]
					display7SEG_a(YELLOW_INC / 10);
 8000af6:	4b67      	ldr	r3, [pc, #412]	; (8000c94 <fsm_tuning_run+0x428>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a67      	ldr	r2, [pc, #412]	; (8000c98 <fsm_tuning_run+0x42c>)
 8000afc:	fb82 1203 	smull	r1, r2, r2, r3
 8000b00:	1092      	asrs	r2, r2, #2
 8000b02:	17db      	asrs	r3, r3, #31
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f9b2 	bl	8000e70 <display7SEG_a>
					display7SEG_b(YELLOW_INC % 10);
 8000b0c:	4b61      	ldr	r3, [pc, #388]	; (8000c94 <fsm_tuning_run+0x428>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b61      	ldr	r3, [pc, #388]	; (8000c98 <fsm_tuning_run+0x42c>)
 8000b12:	fb83 1302 	smull	r1, r3, r3, r2
 8000b16:	1099      	asrs	r1, r3, #2
 8000b18:	17d3      	asrs	r3, r2, #31
 8000b1a:	1ac9      	subs	r1, r1, r3
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	440b      	add	r3, r1
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	1ad1      	subs	r1, r2, r3
 8000b26:	4608      	mov	r0, r1
 8000b28:	f000 fa20 	bl	8000f6c <display7SEG_b>
					setTimer1(200);
 8000b2c:	20c8      	movs	r0, #200	; 0xc8
 8000b2e:	f000 fc35 	bl	800139c <setTimer1>
				}
			}

			if(isButtonPress(3)){
 8000b32:	2003      	movs	r0, #3
 8000b34:	f7ff fb0a 	bl	800014c <isButtonPress>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <fsm_tuning_run+0x2e0>
				yellow_time_1+=YELLOW_INC;
 8000b3e:	4b58      	ldr	r3, [pc, #352]	; (8000ca0 <fsm_tuning_run+0x434>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b54      	ldr	r3, [pc, #336]	; (8000c94 <fsm_tuning_run+0x428>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a55      	ldr	r2, [pc, #340]	; (8000ca0 <fsm_tuning_run+0x434>)
 8000b4a:	6013      	str	r3, [r2, #0]

			}
			if(isButtonPress(1)){
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fafd 	bl	800014c <isButtonPress>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 8098 	beq.w	8000c8a <fsm_tuning_run+0x41e>
				YELLOW_INC=0;
 8000b5a:	4b4e      	ldr	r3, [pc, #312]	; (8000c94 <fsm_tuning_run+0x428>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
				red_time_2=yellow_time_1+green_time_1;
 8000b60:	4b4f      	ldr	r3, [pc, #316]	; (8000ca0 <fsm_tuning_run+0x434>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b4f      	ldr	r3, [pc, #316]	; (8000ca4 <fsm_tuning_run+0x438>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ca8 <fsm_tuning_run+0x43c>)
 8000b6c:	6013      	str	r3, [r2, #0]
				status=TUNING_GREEN2;
 8000b6e:	4b4f      	ldr	r3, [pc, #316]	; (8000cac <fsm_tuning_run+0x440>)
 8000b70:	222b      	movs	r2, #43	; 0x2b
 8000b72:	601a      	str	r2, [r3, #0]
				setTimer1(10);
 8000b74:	200a      	movs	r0, #10
 8000b76:	f000 fc11 	bl	800139c <setTimer1>
			}
			break;
 8000b7a:	e086      	b.n	8000c8a <fsm_tuning_run+0x41e>

		case TUNING_GREEN2:
			setLEDGREEN2();
 8000b7c:	f000 f8fa 	bl	8000d74 <setLEDGREEN2>
			clearLED1();
 8000b80:	f000 f940 	bl	8000e04 <clearLED1>

			if(isButtonPress(2)){
 8000b84:	2002      	movs	r0, #2
 8000b86:	f7ff fae1 	bl	800014c <isButtonPress>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d01f      	beq.n	8000bd0 <fsm_tuning_run+0x364>
				GREEN_INC++;
 8000b90:	4b47      	ldr	r3, [pc, #284]	; (8000cb0 <fsm_tuning_run+0x444>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a46      	ldr	r2, [pc, #280]	; (8000cb0 <fsm_tuning_run+0x444>)
 8000b98:	6013      	str	r3, [r2, #0]
				display7SEG_a(GREEN_INC / 10);
 8000b9a:	4b45      	ldr	r3, [pc, #276]	; (8000cb0 <fsm_tuning_run+0x444>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a3e      	ldr	r2, [pc, #248]	; (8000c98 <fsm_tuning_run+0x42c>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1092      	asrs	r2, r2, #2
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f960 	bl	8000e70 <display7SEG_a>
				display7SEG_b(GREEN_INC % 10);
 8000bb0:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <fsm_tuning_run+0x444>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <fsm_tuning_run+0x42c>)
 8000bb6:	fb83 1302 	smull	r1, r3, r3, r2
 8000bba:	1099      	asrs	r1, r3, #2
 8000bbc:	17d3      	asrs	r3, r2, #31
 8000bbe:	1ac9      	subs	r1, r1, r3
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	1ad1      	subs	r1, r2, r3
 8000bca:	4608      	mov	r0, r1
 8000bcc:	f000 f9ce 	bl	8000f6c <display7SEG_b>
			}

			if (isButtonLongPress(2)){
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f7ff fad5 	bl	8000180 <isButtonLongPress>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d026      	beq.n	8000c2a <fsm_tuning_run+0x3be>
				if (timer1_flag == 1){
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <fsm_tuning_run+0x430>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d122      	bne.n	8000c2a <fsm_tuning_run+0x3be>
					GREEN_INC--;
 8000be4:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <fsm_tuning_run+0x444>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	4a31      	ldr	r2, [pc, #196]	; (8000cb0 <fsm_tuning_run+0x444>)
 8000bec:	6013      	str	r3, [r2, #0]
					display7SEG_a(GREEN_INC / 10);
 8000bee:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <fsm_tuning_run+0x444>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a29      	ldr	r2, [pc, #164]	; (8000c98 <fsm_tuning_run+0x42c>)
 8000bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf8:	1092      	asrs	r2, r2, #2
 8000bfa:	17db      	asrs	r3, r3, #31
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f936 	bl	8000e70 <display7SEG_a>
					display7SEG_b(GREEN_INC % 10);
 8000c04:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <fsm_tuning_run+0x444>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <fsm_tuning_run+0x42c>)
 8000c0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c0e:	1099      	asrs	r1, r3, #2
 8000c10:	17d3      	asrs	r3, r2, #31
 8000c12:	1ac9      	subs	r1, r1, r3
 8000c14:	460b      	mov	r3, r1
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	440b      	add	r3, r1
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	1ad1      	subs	r1, r2, r3
 8000c1e:	4608      	mov	r0, r1
 8000c20:	f000 f9a4 	bl	8000f6c <display7SEG_b>
					setTimer1(200);
 8000c24:	20c8      	movs	r0, #200	; 0xc8
 8000c26:	f000 fbb9 	bl	800139c <setTimer1>
				}
			}

			if(isButtonPress(3)){
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f7ff fa8e 	bl	800014c <isButtonPress>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <fsm_tuning_run+0x3d8>
				green_time_2+=GREEN_INC;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <fsm_tuning_run+0x448>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <fsm_tuning_run+0x444>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <fsm_tuning_run+0x448>)
 8000c42:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(1)){
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff fa81 	bl	800014c <isButtonPress>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d01e      	beq.n	8000c8e <fsm_tuning_run+0x422>
				GREEN_INC=0;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <fsm_tuning_run+0x444>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
				yellow_time_2=red_time_1-green_time_2;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <fsm_tuning_run+0x44c>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <fsm_tuning_run+0x448>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <fsm_tuning_run+0x450>)
 8000c62:	6013      	str	r3, [r2, #0]
				status=RED1_GREEN2;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <fsm_tuning_run+0x440>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
				setTimer1(green_time_2 * 1000);
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <fsm_tuning_run+0x448>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c72:	fb02 f303 	mul.w	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 fb90 	bl	800139c <setTimer1>
			}
			break;
 8000c7c:	e007      	b.n	8000c8e <fsm_tuning_run+0x422>

		default:
			break;
 8000c7e:	bf00      	nop
 8000c80:	e006      	b.n	8000c90 <fsm_tuning_run+0x424>
			break;
 8000c82:	bf00      	nop
 8000c84:	e004      	b.n	8000c90 <fsm_tuning_run+0x424>
			break;
 8000c86:	bf00      	nop
 8000c88:	e002      	b.n	8000c90 <fsm_tuning_run+0x424>
			break;
 8000c8a:	bf00      	nop
 8000c8c:	e000      	b.n	8000c90 <fsm_tuning_run+0x424>
			break;
 8000c8e:	bf00      	nop

	}
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000b4 	.word	0x200000b4
 8000c98:	66666667 	.word	0x66666667
 8000c9c:	20000150 	.word	0x20000150
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	200000a8 	.word	0x200000a8
 8000cb0:	200000b8 	.word	0x200000b8
 8000cb4:	20000010 	.word	0x20000010
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000014 	.word	0x20000014

08000cc0 <setLEDRED1>:
 *  Created on: Dec 8, 2022
 *      Author: Admin
 */

#include "led_traffic.h"
void setLEDRED1(){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <setLEDRED1+0x20>)
 8000cca:	f000 ffde 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <setLEDRED1+0x20>)
 8000cd6:	f000 ffd8 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <setLEDYELLOW1>:
void setLEDYELLOW1(){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <setLEDYELLOW1+0x20>)
 8000cee:	f000 ffcc 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <setLEDYELLOW1+0x20>)
 8000cfa:	f000 ffc6 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40010800 	.word	0x40010800

08000d08 <setLEDGREEN1>:
void setLEDGREEN1(){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <setLEDGREEN1+0x20>)
 8000d12:	f000 ffba 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <setLEDGREEN1+0x20>)
 8000d1e:	f000 ffb4 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40010800 	.word	0x40010800

08000d2c <setLEDRED2>:

void setLEDRED2(){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <setLEDRED2+0x20>)
 8000d38:	f000 ffa7 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d42:	4802      	ldr	r0, [pc, #8]	; (8000d4c <setLEDRED2+0x20>)
 8000d44:	f000 ffa1 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40010800 	.word	0x40010800

08000d50 <setLEDYELLOW2>:
void setLEDYELLOW2(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <setLEDYELLOW2+0x20>)
 8000d5c:	f000 ff95 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d66:	4802      	ldr	r0, [pc, #8]	; (8000d70 <setLEDYELLOW2+0x20>)
 8000d68:	f000 ff8f 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40010800 	.word	0x40010800

08000d74 <setLEDGREEN2>:
void setLEDGREEN2(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <setLEDGREEN2+0x20>)
 8000d80:	f000 ff83 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8a:	4802      	ldr	r0, [pc, #8]	; (8000d94 <setLEDGREEN2+0x20>)
 8000d8c:	f000 ff7d 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40010800 	.word	0x40010800

08000d98 <setLEDRED3>:

void setLEDRED3(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <setLEDRED3+0x20>)
 8000da4:	f000 ff71 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dae:	4802      	ldr	r0, [pc, #8]	; (8000db8 <setLEDRED3+0x20>)
 8000db0:	f000 ff6b 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40010800 	.word	0x40010800

08000dbc <setLEDYELLOW3>:
void setLEDYELLOW3(){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <setLEDYELLOW3+0x20>)
 8000dc8:	f000 ff5f 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd2:	4802      	ldr	r0, [pc, #8]	; (8000ddc <setLEDYELLOW3+0x20>)
 8000dd4:	f000 ff59 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40010800 	.word	0x40010800

08000de0 <setLEDGREEN3>:
void setLEDGREEN3(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <setLEDGREEN3+0x20>)
 8000dec:	f000 ff4d 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df6:	4802      	ldr	r0, [pc, #8]	; (8000e00 <setLEDGREEN3+0x20>)
 8000df8:	f000 ff47 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40010800 	.word	0x40010800

08000e04 <clearLED1>:

void clearLED1(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <clearLED1+0x20>)
 8000e0e:	f000 ff3c 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <clearLED1+0x20>)
 8000e1a:	f000 ff36 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40010800 	.word	0x40010800

08000e28 <clearLED2>:

void clearLED2(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <clearLED2+0x20>)
 8000e34:	f000 ff29 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3e:	4802      	ldr	r0, [pc, #8]	; (8000e48 <clearLED2+0x20>)
 8000e40:	f000 ff23 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40010800 	.word	0x40010800

08000e4c <clearLED3>:

void clearLED3(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <clearLED3+0x20>)
 8000e58:	f000 ff17 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e62:	4802      	ldr	r0, [pc, #8]	; (8000e6c <clearLED3+0x20>)
 8000e64:	f000 ff11 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40010800 	.word	0x40010800

08000e70 <display7SEG_a>:

void display7SEG_a(int number){
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	switch (number){
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b09      	cmp	r3, #9
 8000e7c:	d86e      	bhi.n	8000f5c <display7SEG_a+0xec>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <display7SEG_a+0x14>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000ead 	.word	0x08000ead
 8000e88:	08000ebf 	.word	0x08000ebf
 8000e8c:	08000ed1 	.word	0x08000ed1
 8000e90:	08000ee3 	.word	0x08000ee3
 8000e94:	08000ef5 	.word	0x08000ef5
 8000e98:	08000f07 	.word	0x08000f07
 8000e9c:	08000f19 	.word	0x08000f19
 8000ea0:	08000f2b 	.word	0x08000f2b
 8000ea4:	08000f3d 	.word	0x08000f3d
 8000ea8:	08000f4b 	.word	0x08000f4b
		case 0:
			GPIOB->ODR = ((GPIOB->ODR) & (0xff00)) | 0x0040;
 8000eac:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <display7SEG_a+0xf8>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000eb4:	4a2c      	ldr	r2, [pc, #176]	; (8000f68 <display7SEG_a+0xf8>)
 8000eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eba:	60d3      	str	r3, [r2, #12]
			break;
 8000ebc:	e04f      	b.n	8000f5e <display7SEG_a+0xee>
		case 1:
			GPIOB->ODR = ((GPIOB->ODR) & (0xff00)) | 0x0079;
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <display7SEG_a+0xf8>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000ec6:	4a28      	ldr	r2, [pc, #160]	; (8000f68 <display7SEG_a+0xf8>)
 8000ec8:	f043 0379 	orr.w	r3, r3, #121	; 0x79
 8000ecc:	60d3      	str	r3, [r2, #12]
			break;
 8000ece:	e046      	b.n	8000f5e <display7SEG_a+0xee>
		case 2:
			GPIOB->ODR = ((GPIOB->ODR) & (0xff00)) | 0x0024;
 8000ed0:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <display7SEG_a+0xf8>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000ed8:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <display7SEG_a+0xf8>)
 8000eda:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000ede:	60d3      	str	r3, [r2, #12]
			break;
 8000ee0:	e03d      	b.n	8000f5e <display7SEG_a+0xee>
		case 3:
			GPIOB->ODR = ((GPIOB->ODR) & (0xff00)) | 0x0030;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <display7SEG_a+0xf8>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <display7SEG_a+0xf8>)
 8000eec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000ef0:	60d3      	str	r3, [r2, #12]
			break;
 8000ef2:	e034      	b.n	8000f5e <display7SEG_a+0xee>
		case 4:
			GPIOB->ODR = ((GPIOB->ODR) & (0xff00)) | 0x0019;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <display7SEG_a+0xf8>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000efc:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <display7SEG_a+0xf8>)
 8000efe:	f043 0319 	orr.w	r3, r3, #25
 8000f02:	60d3      	str	r3, [r2, #12]
			break;
 8000f04:	e02b      	b.n	8000f5e <display7SEG_a+0xee>
		case 5:
			GPIOB->ODR = ((GPIOB->ODR) & (0xff00)) | 0x0012;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <display7SEG_a+0xf8>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <display7SEG_a+0xf8>)
 8000f10:	f043 0312 	orr.w	r3, r3, #18
 8000f14:	60d3      	str	r3, [r2, #12]
			break;
 8000f16:	e022      	b.n	8000f5e <display7SEG_a+0xee>
		case 6:
			GPIOB->ODR = ((GPIOB->ODR) & (0xff00)) | 0x0002;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <display7SEG_a+0xf8>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f20:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <display7SEG_a+0xf8>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	60d3      	str	r3, [r2, #12]
			break;
 8000f28:	e019      	b.n	8000f5e <display7SEG_a+0xee>
		case 7:
			GPIOB->ODR = ((GPIOB->ODR) & (0xff00)) | 0x0078;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <display7SEG_a+0xf8>)
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f32:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <display7SEG_a+0xf8>)
 8000f34:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 8000f38:	60d3      	str	r3, [r2, #12]
			break;
 8000f3a:	e010      	b.n	8000f5e <display7SEG_a+0xee>
		case 8:
			GPIOB->ODR = ((GPIOB->ODR) & (0xff00)) | 0x0000;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <display7SEG_a+0xf8>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <display7SEG_a+0xf8>)
 8000f42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f46:	60d3      	str	r3, [r2, #12]
			break;
 8000f48:	e009      	b.n	8000f5e <display7SEG_a+0xee>
		case 9:
			GPIOB->ODR = ((GPIOB->ODR) & (0xff00)) | 0x0010;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <display7SEG_a+0xf8>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <display7SEG_a+0xf8>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	60d3      	str	r3, [r2, #12]
			break;
 8000f5a:	e000      	b.n	8000f5e <display7SEG_a+0xee>
		default:
			break;
 8000f5c:	bf00      	nop
	}
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	40010c00 	.word	0x40010c00

08000f6c <display7SEG_b>:

void display7SEG_b(int number){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	switch (number){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b09      	cmp	r3, #9
 8000f78:	d864      	bhi.n	8001044 <display7SEG_b+0xd8>
 8000f7a:	a201      	add	r2, pc, #4	; (adr r2, 8000f80 <display7SEG_b+0x14>)
 8000f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f80:	08000fa9 	.word	0x08000fa9
 8000f84:	08000fb9 	.word	0x08000fb9
 8000f88:	08000fc9 	.word	0x08000fc9
 8000f8c:	08000fd9 	.word	0x08000fd9
 8000f90:	08000fe9 	.word	0x08000fe9
 8000f94:	08000ff9 	.word	0x08000ff9
 8000f98:	08001009 	.word	0x08001009
 8000f9c:	08001019 	.word	0x08001019
 8000fa0:	08001029 	.word	0x08001029
 8000fa4:	08001035 	.word	0x08001035
		case 0:
			GPIOB->ODR = ((GPIOB->ODR) & (0x00ff)) | 0x4000;
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <display7SEG_b+0xe4>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4a28      	ldr	r2, [pc, #160]	; (8001050 <display7SEG_b+0xe4>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	60d3      	str	r3, [r2, #12]
			break;
 8000fb6:	e046      	b.n	8001046 <display7SEG_b+0xda>
		case 1:
			GPIOB->ODR = ((GPIOB->ODR) & (0x00ff)) | 0x7900;
 8000fb8:	4b25      	ldr	r3, [pc, #148]	; (8001050 <display7SEG_b+0xe4>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4a24      	ldr	r2, [pc, #144]	; (8001050 <display7SEG_b+0xe4>)
 8000fc0:	f443 43f2 	orr.w	r3, r3, #30976	; 0x7900
 8000fc4:	60d3      	str	r3, [r2, #12]
			break;
 8000fc6:	e03e      	b.n	8001046 <display7SEG_b+0xda>
		case 2:
			GPIOB->ODR = ((GPIOB->ODR) & (0x00ff)) | 0x2400;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <display7SEG_b+0xe4>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4a20      	ldr	r2, [pc, #128]	; (8001050 <display7SEG_b+0xe4>)
 8000fd0:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000fd4:	60d3      	str	r3, [r2, #12]
			break;
 8000fd6:	e036      	b.n	8001046 <display7SEG_b+0xda>
		case 3:
			GPIOB->ODR = ((GPIOB->ODR) & (0x00ff)) | 0x3000;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <display7SEG_b+0xe4>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <display7SEG_b+0xe4>)
 8000fe0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000fe4:	60d3      	str	r3, [r2, #12]
			break;
 8000fe6:	e02e      	b.n	8001046 <display7SEG_b+0xda>
		case 4:
			GPIOB->ODR = ((GPIOB->ODR) & (0x00ff)) | 0x1900;
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <display7SEG_b+0xe4>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <display7SEG_b+0xe4>)
 8000ff0:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8000ff4:	60d3      	str	r3, [r2, #12]
			break;
 8000ff6:	e026      	b.n	8001046 <display7SEG_b+0xda>
		case 5:
			GPIOB->ODR = ((GPIOB->ODR) & (0x00ff)) | 0x1200;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <display7SEG_b+0xe4>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <display7SEG_b+0xe4>)
 8001000:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 8001004:	60d3      	str	r3, [r2, #12]
			break;
 8001006:	e01e      	b.n	8001046 <display7SEG_b+0xda>
		case 6:
			GPIOB->ODR = ((GPIOB->ODR) & (0x00ff)) | 0x0200;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <display7SEG_b+0xe4>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <display7SEG_b+0xe4>)
 8001010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001014:	60d3      	str	r3, [r2, #12]
			break;
 8001016:	e016      	b.n	8001046 <display7SEG_b+0xda>
		case 7:
			GPIOB->ODR = ((GPIOB->ODR) & (0x00ff)) | 0x7800;
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <display7SEG_b+0xe4>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <display7SEG_b+0xe4>)
 8001020:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8001024:	60d3      	str	r3, [r2, #12]
			break;
 8001026:	e00e      	b.n	8001046 <display7SEG_b+0xda>
		case 8:
			GPIOB->ODR = ((GPIOB->ODR) & (0x00ff)) | 0x0000;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <display7SEG_b+0xe4>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <display7SEG_b+0xe4>)
 800102e:	b2db      	uxtb	r3, r3
 8001030:	60d3      	str	r3, [r2, #12]
			break;
 8001032:	e008      	b.n	8001046 <display7SEG_b+0xda>
		case 9:
			GPIOB->ODR = ((GPIOB->ODR) & (0x00ff)) | 0x1000;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <display7SEG_b+0xe4>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <display7SEG_b+0xe4>)
 800103c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001040:	60d3      	str	r3, [r2, #12]
			break;
 8001042:	e000      	b.n	8001046 <display7SEG_b+0xda>
		default:
			break;
 8001044:	bf00      	nop
	}
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40010c00 	.word	0x40010c00

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f000 fb14 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f828 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 f928 	bl	80012b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001064:	f000 f864 	bl	8001130 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001068:	f000 f8ae 	bl	80011c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <main+0x4c>)
 800106e:	f001 fa5d 	bl	800252c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001072:	2100      	movs	r1, #0
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <main+0x50>)
 8001076:	f001 fafd 	bl	8002674 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <main+0x54>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
  status_pedes = INIT_PEDES;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <main+0x58>)
 8001082:	2232      	movs	r2, #50	; 0x32
 8001084:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_auto_run();
 8001086:	f7ff f939 	bl	80002fc <fsm_auto_run>
	  fsm_manual_run();
 800108a:	f7ff facd 	bl	8000628 <fsm_manual_run>
	  fsm_pedes_run();
 800108e:	f7ff fba5 	bl	80007dc <fsm_pedes_run>
	  fsm_tuning_run();
 8001092:	f7ff fbeb 	bl	800086c <fsm_tuning_run>
	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 100);
 8001096:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <main+0x50>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2264      	movs	r2, #100	; 0x64
 800109c:	635a      	str	r2, [r3, #52]	; 0x34
	  fsm_auto_run();
 800109e:	e7f2      	b.n	8001086 <main+0x32>
 80010a0:	200000bc 	.word	0x200000bc
 80010a4:	20000104 	.word	0x20000104
 80010a8:	200000a8 	.word	0x200000a8
 80010ac:	200000a4 	.word	0x200000a4

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b090      	sub	sp, #64	; 0x40
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	2228      	movs	r2, #40	; 0x28
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 f94a 	bl	8003358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d6:	2301      	movs	r3, #1
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010da:	2310      	movs	r3, #16
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010e2:	2300      	movs	r3, #0
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80010e6:	2300      	movs	r3, #0
 80010e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fde4 	bl	8001cbc <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80010fa:	f000 f949 	bl	8001390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2302      	movs	r3, #2
 8001104:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f001 f852 	bl	80021c0 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001122:	f000 f935 	bl	8001390 <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3740      	adds	r7, #64	; 0x40
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_TIM2_Init+0x94>)
 800114e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001152:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <MX_TIM2_Init+0x94>)
 8001156:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800115a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_TIM2_Init+0x94>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <MX_TIM2_Init+0x94>)
 8001164:	220a      	movs	r2, #10
 8001166:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <MX_TIM2_Init+0x94>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_TIM2_Init+0x94>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001174:	4813      	ldr	r0, [pc, #76]	; (80011c4 <MX_TIM2_Init+0x94>)
 8001176:	f001 f989 	bl	800248c <HAL_TIM_Base_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001180:	f000 f906 	bl	8001390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4619      	mov	r1, r3
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <MX_TIM2_Init+0x94>)
 8001192:	f001 fcd1 	bl	8002b38 <HAL_TIM_ConfigClockSource>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800119c:	f000 f8f8 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_TIM2_Init+0x94>)
 80011ae:	f002 f845 	bl	800323c <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011b8:	f000 f8ea 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200000bc 	.word	0x200000bc

080011c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <MX_TIM3_Init+0xe4>)
 80011fa:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <MX_TIM3_Init+0xe8>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <MX_TIM3_Init+0xe4>)
 8001200:	224f      	movs	r2, #79	; 0x4f
 8001202:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b29      	ldr	r3, [pc, #164]	; (80012ac <MX_TIM3_Init+0xe4>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <MX_TIM3_Init+0xe4>)
 800120c:	2264      	movs	r2, #100	; 0x64
 800120e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_TIM3_Init+0xe4>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <MX_TIM3_Init+0xe4>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800121c:	4823      	ldr	r0, [pc, #140]	; (80012ac <MX_TIM3_Init+0xe4>)
 800121e:	f001 f935 	bl	800248c <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001228:	f000 f8b2 	bl	8001390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001236:	4619      	mov	r1, r3
 8001238:	481c      	ldr	r0, [pc, #112]	; (80012ac <MX_TIM3_Init+0xe4>)
 800123a:	f001 fc7d 	bl	8002b38 <HAL_TIM_ConfigClockSource>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001244:	f000 f8a4 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001248:	4818      	ldr	r0, [pc, #96]	; (80012ac <MX_TIM3_Init+0xe4>)
 800124a:	f001 f9bb 	bl	80025c4 <HAL_TIM_PWM_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001254:	f000 f89c 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	4619      	mov	r1, r3
 8001266:	4811      	ldr	r0, [pc, #68]	; (80012ac <MX_TIM3_Init+0xe4>)
 8001268:	f001 ffe8 	bl	800323c <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001272:	f000 f88d 	bl	8001390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001276:	2360      	movs	r3, #96	; 0x60
 8001278:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	4619      	mov	r1, r3
 800128c:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_TIM3_Init+0xe4>)
 800128e:	f001 fb95 	bl	80029bc <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001298:	f000 f87a 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <MX_TIM3_Init+0xe4>)
 800129e:	f000 f961 	bl	8001564 <HAL_TIM_MspPostInit>

}
 80012a2:	bf00      	nop
 80012a4:	3738      	adds	r7, #56	; 0x38
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000104 	.word	0x20000104
 80012b0:	40000400 	.word	0x40000400

080012b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <MX_GPIO_Init+0xb8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a27      	ldr	r2, [pc, #156]	; (800136c <MX_GPIO_Init+0xb8>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <MX_GPIO_Init+0xb8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <MX_GPIO_Init+0xb8>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <MX_GPIO_Init+0xb8>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_GPIO_Init+0xb8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D2_Pin|D3_Pin|D4_Pin|D5_Pin
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80012fe:	481c      	ldr	r0, [pc, #112]	; (8001370 <MX_GPIO_Init+0xbc>)
 8001300:	f000 fcc3 	bl	8001c8a <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001304:	2200      	movs	r2, #0
 8001306:	f647 717f 	movw	r1, #32639	; 0x7f7f
 800130a:	481a      	ldr	r0, [pc, #104]	; (8001374 <MX_GPIO_Init+0xc0>)
 800130c:	f000 fcbd 	bl	8001c8a <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin;
 8001310:	231e      	movs	r3, #30
 8001312:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001318:	2301      	movs	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	4619      	mov	r1, r3
 8001322:	4813      	ldr	r0, [pc, #76]	; (8001370 <MX_GPIO_Init+0xbc>)
 8001324:	f000 fb1e 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin|D5_Pin
 8001328:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 800132c:	60bb      	str	r3, [r7, #8]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2302      	movs	r3, #2
 8001338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4619      	mov	r1, r3
 8001340:	480b      	ldr	r0, [pc, #44]	; (8001370 <MX_GPIO_Init+0xbc>)
 8001342:	f000 fb0f 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB3 PB4 PB5 PB6
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001346:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800134a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2302      	movs	r3, #2
 8001356:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4619      	mov	r1, r3
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_GPIO_Init+0xc0>)
 8001360:	f000 fb00 	bl	8001964 <HAL_GPIO_Init>

}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	40010800 	.word	0x40010800
 8001374:	40010c00 	.word	0x40010c00

08001378 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	timer_run();
 8001380:	f000 f844 	bl	800140c <timer_run>
	button_read();
 8001384:	f7fe ff10 	bl	80001a8 <button_read>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	e7fe      	b.n	8001398 <Error_Handler+0x8>
	...

0800139c <setTimer1>:
int timer2_flag = 0;

int timer3_count = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	timer1_flag = 0;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <setTimer1+0x2c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
	timer1_count = duration / CYCLE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <setTimer1+0x30>)
 80013ae:	fb82 1203 	smull	r1, r2, r2, r3
 80013b2:	1092      	asrs	r2, r2, #2
 80013b4:	17db      	asrs	r3, r3, #31
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <setTimer1+0x34>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000150 	.word	0x20000150
 80013cc:	66666667 	.word	0x66666667
 80013d0:	2000014c 	.word	0x2000014c

080013d4 <setTimer2>:

void setTimer2(int duration){
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	timer2_flag = 0;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <setTimer2+0x2c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
	timer2_count = duration / CYCLE;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <setTimer2+0x30>)
 80013e6:	fb82 1203 	smull	r1, r2, r2, r3
 80013ea:	1092      	asrs	r2, r2, #2
 80013ec:	17db      	asrs	r3, r3, #31
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	4a05      	ldr	r2, [pc, #20]	; (8001408 <setTimer2+0x34>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000158 	.word	0x20000158
 8001404:	66666667 	.word	0x66666667
 8001408:	20000154 	.word	0x20000154

0800140c <timer_run>:
void setTimer3(int duration){
	timer3_flag = 0;
	timer3_count = duration / CYCLE;
}

void timer_run(){
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	if (timer1_count > 0){
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <timer_run+0x6c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	dd0b      	ble.n	8001430 <timer_run+0x24>
		timer1_count--;
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <timer_run+0x6c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3b01      	subs	r3, #1
 800141e:	4a16      	ldr	r2, [pc, #88]	; (8001478 <timer_run+0x6c>)
 8001420:	6013      	str	r3, [r2, #0]
		if (timer1_count == 0){
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <timer_run+0x6c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <timer_run+0x24>
			timer1_flag = 1;
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <timer_run+0x70>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_count > 0){
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <timer_run+0x74>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	dd0b      	ble.n	8001450 <timer_run+0x44>
			timer2_count--;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <timer_run+0x74>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3b01      	subs	r3, #1
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <timer_run+0x74>)
 8001440:	6013      	str	r3, [r2, #0]
			if (timer2_count == 0){
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <timer_run+0x74>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <timer_run+0x44>
				timer2_flag = 1;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <timer_run+0x78>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
			}
		}
	if (timer3_count > 0){
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <timer_run+0x7c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	dd0b      	ble.n	8001470 <timer_run+0x64>
			timer3_count--;
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <timer_run+0x7c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <timer_run+0x7c>)
 8001460:	6013      	str	r3, [r2, #0]
			if (timer3_count == 0){
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <timer_run+0x7c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <timer_run+0x64>
				timer3_flag = 1;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <timer_run+0x80>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
			}
		}

}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	2000014c 	.word	0x2000014c
 800147c:	20000150 	.word	0x20000150
 8001480:	20000154 	.word	0x20000154
 8001484:	20000158 	.word	0x20000158
 8001488:	2000015c 	.word	0x2000015c
 800148c:	20000160 	.word	0x20000160

08001490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_MspInit+0x5c>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_MspInit+0x5c>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6193      	str	r3, [r2, #24]
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_MspInit+0x5c>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_MspInit+0x5c>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_MspInit+0x5c>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_MspInit+0x5c>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_MspInit+0x60>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_MspInit+0x60>)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000

080014f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001504:	d114      	bne.n	8001530 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_TIM_Base_MspInit+0x68>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a14      	ldr	r2, [pc, #80]	; (800155c <HAL_TIM_Base_MspInit+0x68>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_TIM_Base_MspInit+0x68>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	201c      	movs	r0, #28
 8001524:	f000 f9e7 	bl	80018f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001528:	201c      	movs	r0, #28
 800152a:	f000 fa00 	bl	800192e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800152e:	e010      	b.n	8001552 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_TIM_Base_MspInit+0x6c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10b      	bne.n	8001552 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_TIM_Base_MspInit+0x68>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_TIM_Base_MspInit+0x68>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_TIM_Base_MspInit+0x68>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	40000400 	.word	0x40000400

08001564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_TIM_MspPostInit+0x58>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d117      	bne.n	80015b4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_TIM_MspPostInit+0x5c>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <HAL_TIM_MspPostInit+0x5c>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_TIM_MspPostInit+0x5c>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 800159c:	2340      	movs	r3, #64	; 0x40
 800159e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <HAL_TIM_MspPostInit+0x60>)
 80015b0:	f000 f9d8 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40000400 	.word	0x40000400
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010800 	.word	0x40010800

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160e:	f000 f87f 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <TIM2_IRQHandler+0x10>)
 800161e:	f001 f8c5 	bl	80027ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200000bc 	.word	0x200000bc

0800162c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001638:	480c      	ldr	r0, [pc, #48]	; (800166c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163a:	490d      	ldr	r1, [pc, #52]	; (8001670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001650:	4c0a      	ldr	r4, [pc, #40]	; (800167c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800165e:	f7ff ffe5 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001662:	f001 fe55 	bl	8003310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001666:	f7ff fcf5 	bl	8001054 <main>
  bx lr
 800166a:	4770      	bx	lr
  ldr r0, =_sdata
 800166c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001670:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001674:	080033a8 	.word	0x080033a8
  ldr r2, =_sbss
 8001678:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800167c:	20000168 	.word	0x20000168

08001680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC1_2_IRQHandler>
	...

08001684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_Init+0x28>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_Init+0x28>)
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 f923 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	200f      	movs	r0, #15
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fef6 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40022000 	.word	0x40022000

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f93b 	bl	800194a <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 f903 	bl	80018f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000001c 	.word	0x2000001c
 8001708:	20000024 	.word	0x20000024
 800170c:	20000020 	.word	0x20000020

08001710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_IncTick+0x1c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_IncTick+0x20>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a03      	ldr	r2, [pc, #12]	; (8001730 <HAL_IncTick+0x20>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	20000024 	.word	0x20000024
 8001730:	20000164 	.word	0x20000164

08001734 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b02      	ldr	r3, [pc, #8]	; (8001744 <HAL_GetTick+0x10>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	20000164 	.word	0x20000164

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4906      	ldr	r1, [pc, #24]	; (80017e0 <__NVIC_EnableIRQ+0x34>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	; (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f7ff ff90 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff2d 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff42 	bl	8001790 <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff90 	bl	8001838 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5f 	bl	80017e4 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff35 	bl	80017ac <__NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffa2 	bl	800189c <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b08b      	sub	sp, #44	; 0x2c
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e161      	b.n	8001c3c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001978:	2201      	movs	r2, #1
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8150 	bne.w	8001c36 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a97      	ldr	r2, [pc, #604]	; (8001bf8 <HAL_GPIO_Init+0x294>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d05e      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019a0:	4a95      	ldr	r2, [pc, #596]	; (8001bf8 <HAL_GPIO_Init+0x294>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d875      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019a6:	4a95      	ldr	r2, [pc, #596]	; (8001bfc <HAL_GPIO_Init+0x298>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d058      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019ac:	4a93      	ldr	r2, [pc, #588]	; (8001bfc <HAL_GPIO_Init+0x298>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d86f      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019b2:	4a93      	ldr	r2, [pc, #588]	; (8001c00 <HAL_GPIO_Init+0x29c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d052      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019b8:	4a91      	ldr	r2, [pc, #580]	; (8001c00 <HAL_GPIO_Init+0x29c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d869      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019be:	4a91      	ldr	r2, [pc, #580]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d04c      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019c4:	4a8f      	ldr	r2, [pc, #572]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d863      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019ca:	4a8f      	ldr	r2, [pc, #572]	; (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d046      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019d0:	4a8d      	ldr	r2, [pc, #564]	; (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d85d      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d82a      	bhi.n	8001a30 <HAL_GPIO_Init+0xcc>
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d859      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <HAL_GPIO_Init+0x80>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001a5f 	.word	0x08001a5f
 80019e8:	08001a39 	.word	0x08001a39
 80019ec:	08001a4b 	.word	0x08001a4b
 80019f0:	08001a8d 	.word	0x08001a8d
 80019f4:	08001a93 	.word	0x08001a93
 80019f8:	08001a93 	.word	0x08001a93
 80019fc:	08001a93 	.word	0x08001a93
 8001a00:	08001a93 	.word	0x08001a93
 8001a04:	08001a93 	.word	0x08001a93
 8001a08:	08001a93 	.word	0x08001a93
 8001a0c:	08001a93 	.word	0x08001a93
 8001a10:	08001a93 	.word	0x08001a93
 8001a14:	08001a93 	.word	0x08001a93
 8001a18:	08001a93 	.word	0x08001a93
 8001a1c:	08001a93 	.word	0x08001a93
 8001a20:	08001a93 	.word	0x08001a93
 8001a24:	08001a93 	.word	0x08001a93
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a55 	.word	0x08001a55
 8001a30:	4a76      	ldr	r2, [pc, #472]	; (8001c0c <HAL_GPIO_Init+0x2a8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a36:	e02c      	b.n	8001a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e029      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	3304      	adds	r3, #4
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e024      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	3308      	adds	r3, #8
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e01f      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e01a      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a66:	2304      	movs	r3, #4
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e013      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a74:	2308      	movs	r3, #8
 8001a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	611a      	str	r2, [r3, #16]
          break;
 8001a7e:	e009      	b.n	8001a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	615a      	str	r2, [r3, #20]
          break;
 8001a8a:	e003      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
          break;
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          break;
 8001a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2bff      	cmp	r3, #255	; 0xff
 8001a98:	d801      	bhi.n	8001a9e <HAL_GPIO_Init+0x13a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	e001      	b.n	8001aa2 <HAL_GPIO_Init+0x13e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d802      	bhi.n	8001ab0 <HAL_GPIO_Init+0x14c>
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x152>
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	3b08      	subs	r3, #8
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	210f      	movs	r1, #15
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80a9 	beq.w	8001c36 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <HAL_GPIO_Init+0x2ac>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a49      	ldr	r2, [pc, #292]	; (8001c10 <HAL_GPIO_Init+0x2ac>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <HAL_GPIO_Init+0x2ac>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001afc:	4a45      	ldr	r2, [pc, #276]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a3d      	ldr	r2, [pc, #244]	; (8001c18 <HAL_GPIO_Init+0x2b4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d00d      	beq.n	8001b44 <HAL_GPIO_Init+0x1e0>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3c      	ldr	r2, [pc, #240]	; (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d007      	beq.n	8001b40 <HAL_GPIO_Init+0x1dc>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a3b      	ldr	r2, [pc, #236]	; (8001c20 <HAL_GPIO_Init+0x2bc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_GPIO_Init+0x1d8>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e004      	b.n	8001b46 <HAL_GPIO_Init+0x1e2>
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e002      	b.n	8001b46 <HAL_GPIO_Init+0x1e2>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_GPIO_Init+0x1e2>
 8001b44:	2300      	movs	r3, #0
 8001b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b48:	f002 0203 	and.w	r2, r2, #3
 8001b4c:	0092      	lsls	r2, r2, #2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b56:	492f      	ldr	r1, [pc, #188]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b70:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	492b      	ldr	r1, [pc, #172]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4927      	ldr	r1, [pc, #156]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b98:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4921      	ldr	r1, [pc, #132]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	491d      	ldr	r1, [pc, #116]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4917      	ldr	r1, [pc, #92]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4913      	ldr	r1, [pc, #76]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01f      	beq.n	8001c28 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	490d      	ldr	r1, [pc, #52]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60cb      	str	r3, [r1, #12]
 8001bf4:	e01f      	b.n	8001c36 <HAL_GPIO_Init+0x2d2>
 8001bf6:	bf00      	nop
 8001bf8:	10320000 	.word	0x10320000
 8001bfc:	10310000 	.word	0x10310000
 8001c00:	10220000 	.word	0x10220000
 8001c04:	10210000 	.word	0x10210000
 8001c08:	10120000 	.word	0x10120000
 8001c0c:	10110000 	.word	0x10110000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40010000 	.word	0x40010000
 8001c18:	40010800 	.word	0x40010800
 8001c1c:	40010c00 	.word	0x40010c00
 8001c20:	40011000 	.word	0x40011000
 8001c24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_GPIO_Init+0x2f4>)
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	4909      	ldr	r1, [pc, #36]	; (8001c58 <HAL_GPIO_Init+0x2f4>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	3301      	adds	r3, #1
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f47f ae96 	bne.w	8001978 <HAL_GPIO_Init+0x14>
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	372c      	adds	r7, #44	; 0x2c
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e001      	b.n	8001c7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	807b      	strh	r3, [r7, #2]
 8001c96:	4613      	mov	r3, r2
 8001c98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c9a:	787b      	ldrb	r3, [r7, #1]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca0:	887a      	ldrh	r2, [r7, #2]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ca6:	e003      	b.n	8001cb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	041a      	lsls	r2, r3, #16
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	611a      	str	r2, [r3, #16]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e272      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8087 	beq.w	8001dea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cdc:	4b92      	ldr	r3, [pc, #584]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d00c      	beq.n	8001d02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ce8:	4b8f      	ldr	r3, [pc, #572]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d112      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5e>
 8001cf4:	4b8c      	ldr	r3, [pc, #560]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d00:	d10b      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d02:	4b89      	ldr	r3, [pc, #548]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d06c      	beq.n	8001de8 <HAL_RCC_OscConfig+0x12c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d168      	bne.n	8001de8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e24c      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x76>
 8001d24:	4b80      	ldr	r3, [pc, #512]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a7f      	ldr	r2, [pc, #508]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	e02e      	b.n	8001d90 <HAL_RCC_OscConfig+0xd4>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x98>
 8001d3a:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a7a      	ldr	r2, [pc, #488]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b78      	ldr	r3, [pc, #480]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a77      	ldr	r2, [pc, #476]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e01d      	b.n	8001d90 <HAL_RCC_OscConfig+0xd4>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0xbc>
 8001d5e:	4b72      	ldr	r3, [pc, #456]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a71      	ldr	r2, [pc, #452]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0xd4>
 8001d78:	4b6b      	ldr	r3, [pc, #428]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a6a      	ldr	r2, [pc, #424]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a67      	ldr	r2, [pc, #412]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fccc 	bl	8001734 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff fcc8 	bl	8001734 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e200      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0xe4>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fcb8 	bl	8001734 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fcb4 	bl	8001734 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1ec      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x10c>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d063      	beq.n	8001ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df6:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e02:	4b49      	ldr	r3, [pc, #292]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d11c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x18c>
 8001e0e:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d116      	bne.n	8001e48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1a:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x176>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e1c0      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e32:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4939      	ldr	r1, [pc, #228]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	e03a      	b.n	8001ebe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7ff fc6d 	bl	8001734 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fc69 	bl	8001734 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e1a1      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4927      	ldr	r1, [pc, #156]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]
 8001e90:	e015      	b.n	8001ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fc4c 	bl	8001734 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fc48 	bl	8001734 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e180      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d03a      	beq.n	8001f40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d019      	beq.n	8001f06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fc2c 	bl	8001734 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fc28 	bl	8001734 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e160      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001efe:	2001      	movs	r0, #1
 8001f00:	f000 faa6 	bl	8002450 <RCC_Delay>
 8001f04:	e01c      	b.n	8001f40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_RCC_OscConfig+0x274>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fc12 	bl	8001734 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f12:	e00f      	b.n	8001f34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff fc0e 	bl	8001734 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d908      	bls.n	8001f34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e146      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	42420000 	.word	0x42420000
 8001f30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	4b92      	ldr	r3, [pc, #584]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e9      	bne.n	8001f14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80a6 	beq.w	800209a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b8b      	ldr	r3, [pc, #556]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10d      	bne.n	8001f7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b88      	ldr	r3, [pc, #544]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a87      	ldr	r2, [pc, #540]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	61d3      	str	r3, [r2, #28]
 8001f6a:	4b85      	ldr	r3, [pc, #532]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f76:	2301      	movs	r3, #1
 8001f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	4b82      	ldr	r3, [pc, #520]	; (8002184 <HAL_RCC_OscConfig+0x4c8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d118      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f86:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <HAL_RCC_OscConfig+0x4c8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a7e      	ldr	r2, [pc, #504]	; (8002184 <HAL_RCC_OscConfig+0x4c8>)
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f92:	f7ff fbcf 	bl	8001734 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9a:	f7ff fbcb 	bl	8001734 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b64      	cmp	r3, #100	; 0x64
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e103      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	4b75      	ldr	r3, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x4c8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x312>
 8001fc0:	4b6f      	ldr	r3, [pc, #444]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a6e      	ldr	r2, [pc, #440]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	e02d      	b.n	800202a <HAL_RCC_OscConfig+0x36e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x334>
 8001fd6:	4b6a      	ldr	r3, [pc, #424]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a69      	ldr	r2, [pc, #420]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	4b67      	ldr	r3, [pc, #412]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a66      	ldr	r2, [pc, #408]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	e01c      	b.n	800202a <HAL_RCC_OscConfig+0x36e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d10c      	bne.n	8002012 <HAL_RCC_OscConfig+0x356>
 8001ff8:	4b61      	ldr	r3, [pc, #388]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a60      	ldr	r2, [pc, #384]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	4b5e      	ldr	r3, [pc, #376]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a5d      	ldr	r2, [pc, #372]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	e00b      	b.n	800202a <HAL_RCC_OscConfig+0x36e>
 8002012:	4b5b      	ldr	r3, [pc, #364]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a5a      	ldr	r2, [pc, #360]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6213      	str	r3, [r2, #32]
 800201e:	4b58      	ldr	r3, [pc, #352]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a57      	ldr	r2, [pc, #348]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d015      	beq.n	800205e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7ff fb7f 	bl	8001734 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7ff fb7b 	bl	8001734 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	; 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e0b1      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ee      	beq.n	800203a <HAL_RCC_OscConfig+0x37e>
 800205c:	e014      	b.n	8002088 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7ff fb69 	bl	8001734 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7ff fb65 	bl	8001734 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	; 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e09b      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207c:	4b40      	ldr	r3, [pc, #256]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ee      	bne.n	8002066 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d105      	bne.n	800209a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208e:	4b3c      	ldr	r3, [pc, #240]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a3b      	ldr	r2, [pc, #236]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002098:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8087 	beq.w	80021b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a4:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d061      	beq.n	8002174 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d146      	bne.n	8002146 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b8:	4b33      	ldr	r3, [pc, #204]	; (8002188 <HAL_RCC_OscConfig+0x4cc>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7ff fb39 	bl	8001734 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c6:	f7ff fb35 	bl	8001734 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e06d      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d8:	4b29      	ldr	r3, [pc, #164]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d108      	bne.n	8002100 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4921      	ldr	r1, [pc, #132]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a19      	ldr	r1, [r3, #32]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	430b      	orrs	r3, r1
 8002112:	491b      	ldr	r1, [pc, #108]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCC_OscConfig+0x4cc>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fb09 	bl	8001734 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002126:	f7ff fb05 	bl	8001734 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e03d      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x46a>
 8002144:	e035      	b.n	80021b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_RCC_OscConfig+0x4cc>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff faf2 	bl	8001734 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff faee 	bl	8001734 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e026      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x498>
 8002172:	e01e      	b.n	80021b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e019      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
 8002180:	40021000 	.word	0x40021000
 8002184:	40007000 	.word	0x40007000
 8002188:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_OscConfig+0x500>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	429a      	cmp	r2, r3
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0d0      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d4:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d910      	bls.n	8002204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b67      	ldr	r3, [pc, #412]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 0207 	bic.w	r2, r3, #7
 80021ea:	4965      	ldr	r1, [pc, #404]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0b8      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a58      	ldr	r2, [pc, #352]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002226:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4a52      	ldr	r2, [pc, #328]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800223e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b50      	ldr	r3, [pc, #320]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	494d      	ldr	r1, [pc, #308]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d040      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d115      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227e:	4b41      	ldr	r3, [pc, #260]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e073      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e06b      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f023 0203 	bic.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4936      	ldr	r1, [pc, #216]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b0:	f7ff fa40 	bl	8001734 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7ff fa3c 	bl	8001734 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e053      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 020c 	and.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1eb      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d210      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
 80022f6:	4922      	ldr	r1, [pc, #136]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e032      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4916      	ldr	r1, [pc, #88]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	490e      	ldr	r1, [pc, #56]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800234e:	f000 f821 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002352:	4602      	mov	r2, r0
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	490a      	ldr	r1, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	5ccb      	ldrb	r3, [r1, r3]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a09      	ldr	r2, [pc, #36]	; (800238c <HAL_RCC_ClockConfig+0x1cc>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1d0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f99e 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40022000 	.word	0x40022000
 8002384:	40021000 	.word	0x40021000
 8002388:	08003390 	.word	0x08003390
 800238c:	2000001c 	.word	0x2000001c
 8002390:	20000020 	.word	0x20000020

08002394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	b490      	push	{r4, r7}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800239a:	4b29      	ldr	r3, [pc, #164]	; (8002440 <HAL_RCC_GetSysClockFreq+0xac>)
 800239c:	1d3c      	adds	r4, r7, #4
 800239e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023a4:	f240 2301 	movw	r3, #513	; 0x201
 80023a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d002      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x40>
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d003      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0x46>
 80023d2:	e02b      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023d6:	623b      	str	r3, [r7, #32]
      break;
 80023d8:	e02b      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	0c9b      	lsrs	r3, r3, #18
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3328      	adds	r3, #40	; 0x28
 80023e4:	443b      	add	r3, r7
 80023e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d012      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	0c5b      	lsrs	r3, r3, #17
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	3328      	adds	r3, #40	; 0x28
 8002402:	443b      	add	r3, r7
 8002404:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002408:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <HAL_RCC_GetSysClockFreq+0xb4>)
 800240e:	fb03 f202 	mul.w	r2, r3, r2
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
 800241a:	e004      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	4a0b      	ldr	r2, [pc, #44]	; (800244c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002420:	fb02 f303 	mul.w	r3, r2, r3
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	623b      	str	r3, [r7, #32]
      break;
 800242a:	e002      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCC_GetSysClockFreq+0xb4>)
 800242e:	623b      	str	r3, [r7, #32]
      break;
 8002430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002432:	6a3b      	ldr	r3, [r7, #32]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3728      	adds	r7, #40	; 0x28
 8002438:	46bd      	mov	sp, r7
 800243a:	bc90      	pop	{r4, r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	08003380 	.word	0x08003380
 8002444:	40021000 	.word	0x40021000
 8002448:	007a1200 	.word	0x007a1200
 800244c:	003d0900 	.word	0x003d0900

08002450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <RCC_Delay+0x34>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <RCC_Delay+0x38>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	0a5b      	lsrs	r3, r3, #9
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	fb02 f303 	mul.w	r3, r2, r3
 800246a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800246c:	bf00      	nop
  }
  while (Delay --);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	60fa      	str	r2, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f9      	bne.n	800246c <RCC_Delay+0x1c>
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	2000001c 	.word	0x2000001c
 8002488:	10624dd3 	.word	0x10624dd3

0800248c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e041      	b.n	8002522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff f81e 	bl	80014f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3304      	adds	r3, #4
 80024c8:	4619      	mov	r1, r3
 80024ca:	4610      	mov	r0, r2
 80024cc:	f000 fc1c 	bl	8002d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d001      	beq.n	8002544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e035      	b.n	80025b0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a16      	ldr	r2, [pc, #88]	; (80025bc <HAL_TIM_Base_Start_IT+0x90>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d009      	beq.n	800257a <HAL_TIM_Base_Start_IT+0x4e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256e:	d004      	beq.n	800257a <HAL_TIM_Base_Start_IT+0x4e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <HAL_TIM_Base_Start_IT+0x94>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d111      	bne.n	800259e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d010      	beq.n	80025ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259c:	e007      	b.n	80025ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0201 	orr.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400

080025c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e041      	b.n	800265a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f839 	bl	8002662 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3304      	adds	r3, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f000 fb80 	bl	8002d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <HAL_TIM_PWM_Start+0x24>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	e022      	b.n	80026de <HAL_TIM_PWM_Start+0x6a>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d109      	bne.n	80026b2 <HAL_TIM_PWM_Start+0x3e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e015      	b.n	80026de <HAL_TIM_PWM_Start+0x6a>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d109      	bne.n	80026cc <HAL_TIM_PWM_Start+0x58>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e008      	b.n	80026de <HAL_TIM_PWM_Start+0x6a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e059      	b.n	800279a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d104      	bne.n	80026f6 <HAL_TIM_PWM_Start+0x82>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f4:	e013      	b.n	800271e <HAL_TIM_PWM_Start+0xaa>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d104      	bne.n	8002706 <HAL_TIM_PWM_Start+0x92>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002704:	e00b      	b.n	800271e <HAL_TIM_PWM_Start+0xaa>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d104      	bne.n	8002716 <HAL_TIM_PWM_Start+0xa2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002714:	e003      	b.n	800271e <HAL_TIM_PWM_Start+0xaa>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	6839      	ldr	r1, [r7, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fd64 	bl	80031f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <HAL_TIM_PWM_Start+0x130>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d107      	bne.n	8002746 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a16      	ldr	r2, [pc, #88]	; (80027a4 <HAL_TIM_PWM_Start+0x130>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_TIM_PWM_Start+0xf0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d004      	beq.n	8002764 <HAL_TIM_PWM_Start+0xf0>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_TIM_PWM_Start+0x134>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d111      	bne.n	8002788 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d010      	beq.n	8002798 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002786:	e007      	b.n	8002798 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40000400 	.word	0x40000400

080027ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0202 	mvn.w	r2, #2
 80027d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fa6f 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa62 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fa71 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b04      	cmp	r3, #4
 8002814:	d122      	bne.n	800285c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b04      	cmp	r3, #4
 8002822:	d11b      	bne.n	800285c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0204 	mvn.w	r2, #4
 800282c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2202      	movs	r2, #2
 8002832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fa45 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 8002848:	e005      	b.n	8002856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa38 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fa47 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b08      	cmp	r3, #8
 8002868:	d122      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b08      	cmp	r3, #8
 8002876:	d11b      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0208 	mvn.w	r2, #8
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2204      	movs	r2, #4
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa1b 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fa0e 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fa1d 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d122      	bne.n	8002904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d11b      	bne.n	8002904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0210 	mvn.w	r2, #16
 80028d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2208      	movs	r2, #8
 80028da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f9f1 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 80028f0:	e005      	b.n	80028fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f9e4 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f9f3 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b01      	cmp	r3, #1
 8002910:	d10e      	bne.n	8002930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d107      	bne.n	8002930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0201 	mvn.w	r2, #1
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe fd24 	bl	8001378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	2b80      	cmp	r3, #128	; 0x80
 800293c:	d10e      	bne.n	800295c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b80      	cmp	r3, #128	; 0x80
 800294a:	d107      	bne.n	800295c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fcd1 	bl	80032fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d10e      	bne.n	8002988 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d107      	bne.n	8002988 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f9b7 	bl	8002cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b20      	cmp	r3, #32
 8002994:	d10e      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d107      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0220 	mvn.w	r2, #32
 80029ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fc9c 	bl	80032ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e0ac      	b.n	8002b30 <HAL_TIM_PWM_ConfigChannel+0x174>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b0c      	cmp	r3, #12
 80029e2:	f200 809f 	bhi.w	8002b24 <HAL_TIM_PWM_ConfigChannel+0x168>
 80029e6:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	08002a21 	.word	0x08002a21
 80029f0:	08002b25 	.word	0x08002b25
 80029f4:	08002b25 	.word	0x08002b25
 80029f8:	08002b25 	.word	0x08002b25
 80029fc:	08002a61 	.word	0x08002a61
 8002a00:	08002b25 	.word	0x08002b25
 8002a04:	08002b25 	.word	0x08002b25
 8002a08:	08002b25 	.word	0x08002b25
 8002a0c:	08002aa3 	.word	0x08002aa3
 8002a10:	08002b25 	.word	0x08002b25
 8002a14:	08002b25 	.word	0x08002b25
 8002a18:	08002b25 	.word	0x08002b25
 8002a1c:	08002ae3 	.word	0x08002ae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f9c6 	bl	8002db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0208 	orr.w	r2, r2, #8
 8002a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0204 	bic.w	r2, r2, #4
 8002a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6999      	ldr	r1, [r3, #24]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	619a      	str	r2, [r3, #24]
      break;
 8002a5e:	e062      	b.n	8002b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fa0c 	bl	8002e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6999      	ldr	r1, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	021a      	lsls	r2, r3, #8
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	619a      	str	r2, [r3, #24]
      break;
 8002aa0:	e041      	b.n	8002b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fa55 	bl	8002f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0208 	orr.w	r2, r2, #8
 8002abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0204 	bic.w	r2, r2, #4
 8002acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69d9      	ldr	r1, [r3, #28]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	61da      	str	r2, [r3, #28]
      break;
 8002ae0:	e021      	b.n	8002b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fa9f 	bl	800302c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	021a      	lsls	r2, r3, #8
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	61da      	str	r2, [r3, #28]
      break;
 8002b22:	e000      	b.n	8002b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002b24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_TIM_ConfigClockSource+0x18>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e0b3      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x180>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b88:	d03e      	beq.n	8002c08 <HAL_TIM_ConfigClockSource+0xd0>
 8002b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8e:	f200 8087 	bhi.w	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b96:	f000 8085 	beq.w	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9e:	d87f      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002ba0:	2b70      	cmp	r3, #112	; 0x70
 8002ba2:	d01a      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0xa2>
 8002ba4:	2b70      	cmp	r3, #112	; 0x70
 8002ba6:	d87b      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002ba8:	2b60      	cmp	r3, #96	; 0x60
 8002baa:	d050      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x116>
 8002bac:	2b60      	cmp	r3, #96	; 0x60
 8002bae:	d877      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb0:	2b50      	cmp	r3, #80	; 0x50
 8002bb2:	d03c      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0xf6>
 8002bb4:	2b50      	cmp	r3, #80	; 0x50
 8002bb6:	d873      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d058      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x136>
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	d86f      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc0:	2b30      	cmp	r3, #48	; 0x30
 8002bc2:	d064      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x156>
 8002bc4:	2b30      	cmp	r3, #48	; 0x30
 8002bc6:	d86b      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d060      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x156>
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d867      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d05c      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x156>
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d05a      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bd8:	e062      	b.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6899      	ldr	r1, [r3, #8]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f000 fae4 	bl	80031b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	609a      	str	r2, [r3, #8]
      break;
 8002c06:	e04e      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6899      	ldr	r1, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f000 facd 	bl	80031b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c2a:	609a      	str	r2, [r3, #8]
      break;
 8002c2c:	e03b      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f000 fa44 	bl	80030c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2150      	movs	r1, #80	; 0x50
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fa9b 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002c4c:	e02b      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f000 fa62 	bl	8003124 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2160      	movs	r1, #96	; 0x60
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fa8b 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e01b      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 fa24 	bl	80030c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2140      	movs	r1, #64	; 0x40
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fa7b 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e00b      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4619      	mov	r1, r3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	f000 fa72 	bl	8003182 <TIM_ITRx_SetConfig>
        break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ca0:	bf00      	nop
 8002ca2:	e000      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ca4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <TIM_Base_SetConfig+0xa8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d007      	beq.n	8002d30 <TIM_Base_SetConfig+0x28>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d003      	beq.n	8002d30 <TIM_Base_SetConfig+0x28>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <TIM_Base_SetConfig+0xac>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d108      	bne.n	8002d42 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a1a      	ldr	r2, [pc, #104]	; (8002db0 <TIM_Base_SetConfig+0xa8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <TIM_Base_SetConfig+0x52>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d003      	beq.n	8002d5a <TIM_Base_SetConfig+0x52>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <TIM_Base_SetConfig+0xac>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d108      	bne.n	8002d6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <TIM_Base_SetConfig+0xa8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d103      	bne.n	8002da0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	615a      	str	r2, [r3, #20]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40000400 	.word	0x40000400

08002db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f023 0201 	bic.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f023 0302 	bic.w	r3, r3, #2
 8002e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <TIM_OC1_SetConfig+0xc8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d10c      	bne.n	8002e2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f023 0308 	bic.w	r3, r3, #8
 8002e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <TIM_OC1_SetConfig+0xc8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d111      	bne.n	8002e5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	621a      	str	r2, [r3, #32]
}
 8002e74:	bf00      	nop
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40012c00 	.word	0x40012c00

08002e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f023 0210 	bic.w	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0320 	bic.w	r3, r3, #32
 8002ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <TIM_OC2_SetConfig+0xd0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d10d      	bne.n	8002f00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002efe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <TIM_OC2_SetConfig+0xd0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d113      	bne.n	8002f30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40012c00 	.word	0x40012c00

08002f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <TIM_OC3_SetConfig+0xd0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10d      	bne.n	8002fd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <TIM_OC3_SetConfig+0xd0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d113      	bne.n	8003002 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	621a      	str	r2, [r3, #32]
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40012c00 	.word	0x40012c00

0800302c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	031b      	lsls	r3, r3, #12
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <TIM_OC4_SetConfig+0x98>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d109      	bne.n	80030a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40012c00 	.word	0x40012c00

080030c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f023 0201 	bic.w	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f023 030a 	bic.w	r3, r3, #10
 8003104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f023 0210 	bic.w	r2, r3, #16
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800314e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	031b      	lsls	r3, r3, #12
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003160:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	f043 0307 	orr.w	r3, r3, #7
 80031a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b087      	sub	sp, #28
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	021a      	lsls	r2, r3, #8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	431a      	orrs	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4313      	orrs	r3, r2
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	609a      	str	r2, [r3, #8]
}
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2201      	movs	r2, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a1a      	ldr	r2, [r3, #32]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	43db      	mvns	r3, r3
 8003216:	401a      	ands	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1a      	ldr	r2, [r3, #32]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	431a      	orrs	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003250:	2302      	movs	r3, #2
 8003252:	e041      	b.n	80032d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d009      	beq.n	80032ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d004      	beq.n	80032ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d10c      	bne.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40012c00 	.word	0x40012c00
 80032e8:	40000400 	.word	0x40000400

080032ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <__libc_init_array>:
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	2600      	movs	r6, #0
 8003314:	4d0c      	ldr	r5, [pc, #48]	; (8003348 <__libc_init_array+0x38>)
 8003316:	4c0d      	ldr	r4, [pc, #52]	; (800334c <__libc_init_array+0x3c>)
 8003318:	1b64      	subs	r4, r4, r5
 800331a:	10a4      	asrs	r4, r4, #2
 800331c:	42a6      	cmp	r6, r4
 800331e:	d109      	bne.n	8003334 <__libc_init_array+0x24>
 8003320:	f000 f822 	bl	8003368 <_init>
 8003324:	2600      	movs	r6, #0
 8003326:	4d0a      	ldr	r5, [pc, #40]	; (8003350 <__libc_init_array+0x40>)
 8003328:	4c0a      	ldr	r4, [pc, #40]	; (8003354 <__libc_init_array+0x44>)
 800332a:	1b64      	subs	r4, r4, r5
 800332c:	10a4      	asrs	r4, r4, #2
 800332e:	42a6      	cmp	r6, r4
 8003330:	d105      	bne.n	800333e <__libc_init_array+0x2e>
 8003332:	bd70      	pop	{r4, r5, r6, pc}
 8003334:	f855 3b04 	ldr.w	r3, [r5], #4
 8003338:	4798      	blx	r3
 800333a:	3601      	adds	r6, #1
 800333c:	e7ee      	b.n	800331c <__libc_init_array+0xc>
 800333e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003342:	4798      	blx	r3
 8003344:	3601      	adds	r6, #1
 8003346:	e7f2      	b.n	800332e <__libc_init_array+0x1e>
 8003348:	080033a0 	.word	0x080033a0
 800334c:	080033a0 	.word	0x080033a0
 8003350:	080033a0 	.word	0x080033a0
 8003354:	080033a4 	.word	0x080033a4

08003358 <memset>:
 8003358:	4603      	mov	r3, r0
 800335a:	4402      	add	r2, r0
 800335c:	4293      	cmp	r3, r2
 800335e:	d100      	bne.n	8003362 <memset+0xa>
 8003360:	4770      	bx	lr
 8003362:	f803 1b01 	strb.w	r1, [r3], #1
 8003366:	e7f9      	b.n	800335c <memset+0x4>

08003368 <_init>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr

08003374 <_fini>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr
